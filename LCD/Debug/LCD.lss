
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000008e6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  000010c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093d  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000318  00000000  00000000  00001abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057a  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00002350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b2  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f1  00000000  00000000  00002786  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "STD_MACROS.h"
#include "LCD.h"


int main(void){
	LCD_vInit();
  92:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_vInit>
	
	LCD_vSendCmd(0x40);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_vSendCmd>
	LCD_vSendData(0B00000); /// for ??
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00100);
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B01010);
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B10101);
  ae:	85 e1       	ldi	r24, 0x15	; 21
  b0:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B01011);
  b4:	8b e0       	ldi	r24, 0x0B	; 11
  b6:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B11111);
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00000);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00000);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	
    LCD_vSendData(0B00000);// for ?
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00001);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00001);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00001);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00001);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00001);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00001);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00000);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>



    LCD_vSendData(0B00000);// for ?
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00000);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00000);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00100);
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00001);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B11111);
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00000);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
    LCD_vSendData(0B00000);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	
	LCD_vSendData(0B00000);// for ?
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00000);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00000);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00001);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00001);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B11111);
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00100);
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vSendData(0B00000);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>

	LCD_vMoveCursor(2,16);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	60 e1       	ldi	r22, 0x10	; 16
 160:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendData(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vMoveCursor(2,15);
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	6f e0       	ldi	r22, 0x0F	; 15
 16e:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendData(2);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vMoveCursor(2,14);
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	6e e0       	ldi	r22, 0x0E	; 14
 17c:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendData(1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vMoveCursor(2,12);
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	6c e0       	ldi	r22, 0x0C	; 12
 18a:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendData(2);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vMoveCursor(2,11);
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	6b e0       	ldi	r22, 0x0B	; 11
 198:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendData(3);
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vMoveCursor(2,10);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendData(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vMoveCursor(2,9);
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	69 e0       	ldi	r22, 0x09	; 9
 1b4:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendData(1);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	LCD_vMoveCursor(2,8);
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	68 e0       	ldi	r22, 0x08	; 8
 1c2:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendData(2);
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
	
	LCD_vMoveCursor(1,1);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vMoveCursor>
	LCD_vSendString("HANA NABHAN");
 1d4:	80 e6       	ldi	r24, 0x60	; 96
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_vSendString>
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <main+0x14a>

000001de <DIO_voidSetPinDir>:
 * RETURN : No return
 */


void DIO_voidSetPinDir(uint8 PortName , uint8 PinNumber , DIOPinDIR value){
	switch(PortName){
 1de:	84 34       	cpi	r24, 0x44	; 68
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <DIO_voidSetPinDir+0x6>
 1e2:	71 c0       	rjmp	.+226    	; 0x2c6 <DIO_voidSetPinDir+0xe8>
 1e4:	85 34       	cpi	r24, 0x45	; 69
 1e6:	48 f4       	brcc	.+18     	; 0x1fa <DIO_voidSetPinDir+0x1c>
 1e8:	82 34       	cpi	r24, 0x42	; 66
 1ea:	99 f1       	breq	.+102    	; 0x252 <DIO_voidSetPinDir+0x74>
 1ec:	83 34       	cpi	r24, 0x43	; 67
 1ee:	08 f0       	brcs	.+2      	; 0x1f2 <DIO_voidSetPinDir+0x14>
 1f0:	4d c0       	rjmp	.+154    	; 0x28c <DIO_voidSetPinDir+0xae>
 1f2:	81 34       	cpi	r24, 0x41	; 65
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <DIO_voidSetPinDir+0x1a>
 1f6:	83 c0       	rjmp	.+262    	; 0x2fe <DIO_voidSetPinDir+0x120>
 1f8:	0f c0       	rjmp	.+30     	; 0x218 <DIO_voidSetPinDir+0x3a>
 1fa:	82 36       	cpi	r24, 0x62	; 98
 1fc:	51 f1       	breq	.+84     	; 0x252 <DIO_voidSetPinDir+0x74>
 1fe:	83 36       	cpi	r24, 0x63	; 99
 200:	20 f4       	brcc	.+8      	; 0x20a <DIO_voidSetPinDir+0x2c>
 202:	81 36       	cpi	r24, 0x61	; 97
 204:	09 f0       	breq	.+2      	; 0x208 <DIO_voidSetPinDir+0x2a>
 206:	7b c0       	rjmp	.+246    	; 0x2fe <DIO_voidSetPinDir+0x120>
 208:	07 c0       	rjmp	.+14     	; 0x218 <DIO_voidSetPinDir+0x3a>
 20a:	83 36       	cpi	r24, 0x63	; 99
 20c:	09 f4       	brne	.+2      	; 0x210 <DIO_voidSetPinDir+0x32>
 20e:	3e c0       	rjmp	.+124    	; 0x28c <DIO_voidSetPinDir+0xae>
 210:	84 36       	cpi	r24, 0x64	; 100
 212:	09 f0       	breq	.+2      	; 0x216 <DIO_voidSetPinDir+0x38>
 214:	74 c0       	rjmp	.+232    	; 0x2fe <DIO_voidSetPinDir+0x120>
 216:	57 c0       	rjmp	.+174    	; 0x2c6 <DIO_voidSetPinDir+0xe8>
		case'A':
		case'a':
			if(value == OUTPUT_PIN){
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	69 f4       	brne	.+26     	; 0x236 <DIO_voidSetPinDir+0x58>

				SET_BIT( DDRA , PinNumber);
 21c:	2a b3       	in	r18, 0x1a	; 26
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinDir+0x4c>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinDir+0x48>
 22e:	ba 01       	movw	r22, r20
 230:	62 2b       	or	r22, r18
 232:	6a bb       	out	0x1a, r22	; 26
 234:	08 95       	ret

			}
			else{

				CLR_BIT( DDRA , PinNumber);
 236:	2a b3       	in	r18, 0x1a	; 26
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_voidSetPinDir+0x66>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_voidSetPinDir+0x62>
 248:	ba 01       	movw	r22, r20
 24a:	60 95       	com	r22
 24c:	62 23       	and	r22, r18
 24e:	6a bb       	out	0x1a, r22	; 26
 250:	08 95       	ret

			}
		break;
		case'B':
		case'b':
			if(value == OUTPUT_PIN){
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	69 f4       	brne	.+26     	; 0x270 <DIO_voidSetPinDir+0x92>

				SET_BIT( DDRB , PinNumber);
 256:	27 b3       	in	r18, 0x17	; 23
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	ac 01       	movw	r20, r24
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_voidSetPinDir+0x86>
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_voidSetPinDir+0x82>
 268:	ba 01       	movw	r22, r20
 26a:	62 2b       	or	r22, r18
 26c:	67 bb       	out	0x17, r22	; 23
 26e:	08 95       	ret

			}
			else{

				CLR_BIT( DDRB , PinNumber);
 270:	27 b3       	in	r18, 0x17	; 23
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_voidSetPinDir+0xa0>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_voidSetPinDir+0x9c>
 282:	ba 01       	movw	r22, r20
 284:	60 95       	com	r22
 286:	62 23       	and	r22, r18
 288:	67 bb       	out	0x17, r22	; 23
 28a:	08 95       	ret

			}
		break;
		case'C':
		case'c':
			if(value == OUTPUT_PIN){
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	69 f4       	brne	.+26     	; 0x2aa <DIO_voidSetPinDir+0xcc>

				SET_BIT( DDRC , PinNumber);
 290:	24 b3       	in	r18, 0x14	; 20
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_voidSetPinDir+0xc0>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_voidSetPinDir+0xbc>
 2a2:	ba 01       	movw	r22, r20
 2a4:	62 2b       	or	r22, r18
 2a6:	64 bb       	out	0x14, r22	; 20
 2a8:	08 95       	ret

			}
			else{

				CLR_BIT( DDRC , PinNumber);
 2aa:	24 b3       	in	r18, 0x14	; 20
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_voidSetPinDir+0xda>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_voidSetPinDir+0xd6>
 2bc:	ba 01       	movw	r22, r20
 2be:	60 95       	com	r22
 2c0:	62 23       	and	r22, r18
 2c2:	64 bb       	out	0x14, r22	; 20
 2c4:	08 95       	ret

			}
		break;
		case'D':
		case'd':
			if(value == OUTPUT_PIN){
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	69 f4       	brne	.+26     	; 0x2e4 <DIO_voidSetPinDir+0x106>

				SET_BIT( DDRD , PinNumber);
 2ca:	21 b3       	in	r18, 0x11	; 17
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_voidSetPinDir+0xfa>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_voidSetPinDir+0xf6>
 2dc:	ba 01       	movw	r22, r20
 2de:	62 2b       	or	r22, r18
 2e0:	61 bb       	out	0x11, r22	; 17
 2e2:	08 95       	ret

			}
			else{

				CLR_BIT( DDRD , PinNumber);
 2e4:	21 b3       	in	r18, 0x11	; 17
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ac 01       	movw	r20, r24
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinDir+0x114>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinDir+0x110>
 2f6:	ba 01       	movw	r22, r20
 2f8:	60 95       	com	r22
 2fa:	62 23       	and	r22, r18
 2fc:	61 bb       	out	0x11, r22	; 17
 2fe:	08 95       	ret

00000300 <DIO_voidWritePin>:
 * DESCRIPTION : Used to write on specific pin from a specific port as logic high or low
 * RETURN : No return
 */

void DIO_voidWritePin(uint8 PortName , uint8 PinNumber , uint8 value){
	switch(PortName){
 300:	84 34       	cpi	r24, 0x44	; 68
 302:	09 f4       	brne	.+2      	; 0x306 <DIO_voidWritePin+0x6>
 304:	71 c0       	rjmp	.+226    	; 0x3e8 <DIO_voidWritePin+0xe8>
 306:	85 34       	cpi	r24, 0x45	; 69
 308:	48 f4       	brcc	.+18     	; 0x31c <DIO_voidWritePin+0x1c>
 30a:	82 34       	cpi	r24, 0x42	; 66
 30c:	99 f1       	breq	.+102    	; 0x374 <DIO_voidWritePin+0x74>
 30e:	83 34       	cpi	r24, 0x43	; 67
 310:	08 f0       	brcs	.+2      	; 0x314 <DIO_voidWritePin+0x14>
 312:	4d c0       	rjmp	.+154    	; 0x3ae <DIO_voidWritePin+0xae>
 314:	81 34       	cpi	r24, 0x41	; 65
 316:	09 f0       	breq	.+2      	; 0x31a <DIO_voidWritePin+0x1a>
 318:	83 c0       	rjmp	.+262    	; 0x420 <DIO_voidWritePin+0x120>
 31a:	0f c0       	rjmp	.+30     	; 0x33a <DIO_voidWritePin+0x3a>
 31c:	82 36       	cpi	r24, 0x62	; 98
 31e:	51 f1       	breq	.+84     	; 0x374 <DIO_voidWritePin+0x74>
 320:	83 36       	cpi	r24, 0x63	; 99
 322:	20 f4       	brcc	.+8      	; 0x32c <DIO_voidWritePin+0x2c>
 324:	81 36       	cpi	r24, 0x61	; 97
 326:	09 f0       	breq	.+2      	; 0x32a <DIO_voidWritePin+0x2a>
 328:	7b c0       	rjmp	.+246    	; 0x420 <DIO_voidWritePin+0x120>
 32a:	07 c0       	rjmp	.+14     	; 0x33a <DIO_voidWritePin+0x3a>
 32c:	83 36       	cpi	r24, 0x63	; 99
 32e:	09 f4       	brne	.+2      	; 0x332 <DIO_voidWritePin+0x32>
 330:	3e c0       	rjmp	.+124    	; 0x3ae <DIO_voidWritePin+0xae>
 332:	84 36       	cpi	r24, 0x64	; 100
 334:	09 f0       	breq	.+2      	; 0x338 <DIO_voidWritePin+0x38>
 336:	74 c0       	rjmp	.+232    	; 0x420 <DIO_voidWritePin+0x120>
 338:	57 c0       	rjmp	.+174    	; 0x3e8 <DIO_voidWritePin+0xe8>
		case'A':
		case'a':
			if(value == HIGH){
 33a:	41 30       	cpi	r20, 0x01	; 1
 33c:	69 f4       	brne	.+26     	; 0x358 <DIO_voidWritePin+0x58>

				SET_BIT( PORTA , PinNumber);
 33e:	2b b3       	in	r18, 0x1b	; 27
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	ac 01       	movw	r20, r24
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_voidWritePin+0x4c>
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_voidWritePin+0x48>
 350:	ba 01       	movw	r22, r20
 352:	62 2b       	or	r22, r18
 354:	6b bb       	out	0x1b, r22	; 27
 356:	08 95       	ret

			}
			else{

				CLR_BIT( PORTA , PinNumber);
 358:	2b b3       	in	r18, 0x1b	; 27
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	ac 01       	movw	r20, r24
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_voidWritePin+0x66>
 362:	44 0f       	add	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_voidWritePin+0x62>
 36a:	ba 01       	movw	r22, r20
 36c:	60 95       	com	r22
 36e:	62 23       	and	r22, r18
 370:	6b bb       	out	0x1b, r22	; 27
 372:	08 95       	ret

			}
		break;
		case'B':
		case'b':
			if(value == HIGH){
 374:	41 30       	cpi	r20, 0x01	; 1
 376:	69 f4       	brne	.+26     	; 0x392 <DIO_voidWritePin+0x92>

				SET_BIT( PORTB , PinNumber);
 378:	28 b3       	in	r18, 0x18	; 24
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	ac 01       	movw	r20, r24
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_voidWritePin+0x86>
 382:	44 0f       	add	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_voidWritePin+0x82>
 38a:	ba 01       	movw	r22, r20
 38c:	62 2b       	or	r22, r18
 38e:	68 bb       	out	0x18, r22	; 24
 390:	08 95       	ret

			}
			else{

				CLR_BIT( PORTB , PinNumber);
 392:	28 b3       	in	r18, 0x18	; 24
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	ac 01       	movw	r20, r24
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_voidWritePin+0xa0>
 39c:	44 0f       	add	r20, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_voidWritePin+0x9c>
 3a4:	ba 01       	movw	r22, r20
 3a6:	60 95       	com	r22
 3a8:	62 23       	and	r22, r18
 3aa:	68 bb       	out	0x18, r22	; 24
 3ac:	08 95       	ret

			}
		break;
		case'C':
		case'c':
			if(value == HIGH){
 3ae:	41 30       	cpi	r20, 0x01	; 1
 3b0:	69 f4       	brne	.+26     	; 0x3cc <DIO_voidWritePin+0xcc>

				SET_BIT( PORTC , PinNumber);
 3b2:	25 b3       	in	r18, 0x15	; 21
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	ac 01       	movw	r20, r24
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_voidWritePin+0xc0>
 3bc:	44 0f       	add	r20, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_voidWritePin+0xbc>
 3c4:	ba 01       	movw	r22, r20
 3c6:	62 2b       	or	r22, r18
 3c8:	65 bb       	out	0x15, r22	; 21
 3ca:	08 95       	ret

			}
			else{

				CLR_BIT( PORTC , PinNumber);
 3cc:	25 b3       	in	r18, 0x15	; 21
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	ac 01       	movw	r20, r24
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_voidWritePin+0xda>
 3d6:	44 0f       	add	r20, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_voidWritePin+0xd6>
 3de:	ba 01       	movw	r22, r20
 3e0:	60 95       	com	r22
 3e2:	62 23       	and	r22, r18
 3e4:	65 bb       	out	0x15, r22	; 21
 3e6:	08 95       	ret

			}
		break;
		case'D':
		case'd':
			if(value == HIGH){
 3e8:	41 30       	cpi	r20, 0x01	; 1
 3ea:	69 f4       	brne	.+26     	; 0x406 <DIO_voidWritePin+0x106>

				SET_BIT( PORTD , PinNumber);
 3ec:	22 b3       	in	r18, 0x12	; 18
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_voidWritePin+0xfa>
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_voidWritePin+0xf6>
 3fe:	ba 01       	movw	r22, r20
 400:	62 2b       	or	r22, r18
 402:	62 bb       	out	0x12, r22	; 18
 404:	08 95       	ret

			}
			else{

				CLR_BIT( PORTD , PinNumber);
 406:	22 b3       	in	r18, 0x12	; 18
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	ac 01       	movw	r20, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_voidWritePin+0x114>
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_voidWritePin+0x110>
 418:	ba 01       	movw	r22, r20
 41a:	60 95       	com	r22
 41c:	62 23       	and	r22, r18
 41e:	62 bb       	out	0x12, r22	; 18
 420:	08 95       	ret

00000422 <DIO_u8ReadPin>:
 */


uint8 DIO_u8ReadPin(uint8 PortName , uint8 PinNumber){
	uint8 value;
	switch(PortName){
 422:	84 34       	cpi	r24, 0x44	; 68
 424:	09 f4       	brne	.+2      	; 0x428 <DIO_u8ReadPin+0x6>
 426:	51 c0       	rjmp	.+162    	; 0x4ca <DIO_u8ReadPin+0xa8>
 428:	85 34       	cpi	r24, 0x45	; 69
 42a:	40 f4       	brcc	.+16     	; 0x43c <DIO_u8ReadPin+0x1a>
 42c:	82 34       	cpi	r24, 0x42	; 66
 42e:	39 f1       	breq	.+78     	; 0x47e <DIO_u8ReadPin+0x5c>
 430:	83 34       	cpi	r24, 0x43	; 67
 432:	c0 f5       	brcc	.+112    	; 0x4a4 <DIO_u8ReadPin+0x82>
 434:	81 34       	cpi	r24, 0x41	; 65
 436:	09 f0       	breq	.+2      	; 0x43a <DIO_u8ReadPin+0x18>
 438:	5a c0       	rjmp	.+180    	; 0x4ee <DIO_u8ReadPin+0xcc>
 43a:	0e c0       	rjmp	.+28     	; 0x458 <DIO_u8ReadPin+0x36>
 43c:	82 36       	cpi	r24, 0x62	; 98
 43e:	f9 f0       	breq	.+62     	; 0x47e <DIO_u8ReadPin+0x5c>
 440:	83 36       	cpi	r24, 0x63	; 99
 442:	20 f4       	brcc	.+8      	; 0x44c <DIO_u8ReadPin+0x2a>
 444:	81 36       	cpi	r24, 0x61	; 97
 446:	09 f0       	breq	.+2      	; 0x44a <DIO_u8ReadPin+0x28>
 448:	52 c0       	rjmp	.+164    	; 0x4ee <DIO_u8ReadPin+0xcc>
 44a:	06 c0       	rjmp	.+12     	; 0x458 <DIO_u8ReadPin+0x36>
 44c:	83 36       	cpi	r24, 0x63	; 99
 44e:	51 f1       	breq	.+84     	; 0x4a4 <DIO_u8ReadPin+0x82>
 450:	84 36       	cpi	r24, 0x64	; 100
 452:	09 f0       	breq	.+2      	; 0x456 <DIO_u8ReadPin+0x34>
 454:	4c c0       	rjmp	.+152    	; 0x4ee <DIO_u8ReadPin+0xcc>
 456:	39 c0       	rjmp	.+114    	; 0x4ca <DIO_u8ReadPin+0xa8>
		case'A':
		case'a':
			value=READ_BIT(PINA , PinNumber);
 458:	29 b3       	in	r18, 0x19	; 25
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	06 2e       	mov	r0, r22
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_u8ReadPin+0x44>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_u8ReadPin+0x40>
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	82 23       	and	r24, r18
 46e:	93 23       	and	r25, r19
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_u8ReadPin+0x54>
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_u8ReadPin+0x50>
 47a:	98 2f       	mov	r25, r24
		break;
 47c:	38 c0       	rjmp	.+112    	; 0x4ee <DIO_u8ReadPin+0xcc>
		case'B':
		case'b':
			value=READ_BIT(PINB , PinNumber);
 47e:	26 b3       	in	r18, 0x16	; 22
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	06 2e       	mov	r0, r22
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_u8ReadPin+0x6a>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_u8ReadPin+0x66>
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	82 23       	and	r24, r18
 494:	93 23       	and	r25, r19
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_u8ReadPin+0x7a>
 498:	95 95       	asr	r25
 49a:	87 95       	ror	r24
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_u8ReadPin+0x76>
 4a0:	98 2f       	mov	r25, r24

		break;
 4a2:	25 c0       	rjmp	.+74     	; 0x4ee <DIO_u8ReadPin+0xcc>
		case'C':
		case'c':
			value=READ_BIT(PINC , PinNumber);
 4a4:	23 b3       	in	r18, 0x13	; 19
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	06 2e       	mov	r0, r22
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_u8ReadPin+0x90>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_u8ReadPin+0x8c>
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	82 23       	and	r24, r18
 4ba:	93 23       	and	r25, r19
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_u8ReadPin+0xa0>
 4be:	95 95       	asr	r25
 4c0:	87 95       	ror	r24
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_u8ReadPin+0x9c>
 4c6:	98 2f       	mov	r25, r24

		break;
 4c8:	12 c0       	rjmp	.+36     	; 0x4ee <DIO_u8ReadPin+0xcc>
		case'D':
		case'd':
			value=READ_BIT(PIND , PinNumber);
 4ca:	20 b3       	in	r18, 0x10	; 16
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	06 2e       	mov	r0, r22
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8ReadPin+0xb6>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8ReadPin+0xb2>
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	82 23       	and	r24, r18
 4e0:	93 23       	and	r25, r19
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_u8ReadPin+0xc6>
 4e4:	95 95       	asr	r25
 4e6:	87 95       	ror	r24
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_u8ReadPin+0xc2>
 4ec:	98 2f       	mov	r25, r24
		default:
		break;

	}
	return value;
}
 4ee:	89 2f       	mov	r24, r25
 4f0:	08 95       	ret

000004f2 <DIO_voidTogglePin>:
 * ARGUMENTS : uint8 PortName , uint8 PinNumber
 * DESCRIPTION : Used to toggle specific pin from a specific port
 * RETURN : No return
 */
void DIO_voidTogglePin(uint8 PortName , uint8 PinNumber){
	switch(PortName){
 4f2:	84 34       	cpi	r24, 0x44	; 68
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <DIO_voidTogglePin+0x6>
 4f6:	3d c0       	rjmp	.+122    	; 0x572 <DIO_voidTogglePin+0x80>
 4f8:	85 34       	cpi	r24, 0x45	; 69
 4fa:	40 f4       	brcc	.+16     	; 0x50c <DIO_voidTogglePin+0x1a>
 4fc:	82 34       	cpi	r24, 0x42	; 66
 4fe:	f9 f0       	breq	.+62     	; 0x53e <DIO_voidTogglePin+0x4c>
 500:	83 34       	cpi	r24, 0x43	; 67
 502:	50 f5       	brcc	.+84     	; 0x558 <DIO_voidTogglePin+0x66>
 504:	81 34       	cpi	r24, 0x41	; 65
 506:	09 f0       	breq	.+2      	; 0x50a <DIO_voidTogglePin+0x18>
 508:	40 c0       	rjmp	.+128    	; 0x58a <DIO_voidTogglePin+0x98>
 50a:	0c c0       	rjmp	.+24     	; 0x524 <DIO_voidTogglePin+0x32>
 50c:	82 36       	cpi	r24, 0x62	; 98
 50e:	b9 f0       	breq	.+46     	; 0x53e <DIO_voidTogglePin+0x4c>
 510:	83 36       	cpi	r24, 0x63	; 99
 512:	18 f4       	brcc	.+6      	; 0x51a <DIO_voidTogglePin+0x28>
 514:	81 36       	cpi	r24, 0x61	; 97
 516:	c9 f5       	brne	.+114    	; 0x58a <DIO_voidTogglePin+0x98>
 518:	05 c0       	rjmp	.+10     	; 0x524 <DIO_voidTogglePin+0x32>
 51a:	83 36       	cpi	r24, 0x63	; 99
 51c:	e9 f0       	breq	.+58     	; 0x558 <DIO_voidTogglePin+0x66>
 51e:	84 36       	cpi	r24, 0x64	; 100
 520:	a1 f5       	brne	.+104    	; 0x58a <DIO_voidTogglePin+0x98>
 522:	27 c0       	rjmp	.+78     	; 0x572 <DIO_voidTogglePin+0x80>
		case'A':
		case'a':
			TOG_BIT(PORTA , PinNumber);
 524:	2b b3       	in	r18, 0x1b	; 27
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	ac 01       	movw	r20, r24
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_voidTogglePin+0x40>
 52e:	44 0f       	add	r20, r20
 530:	55 1f       	adc	r21, r21
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_voidTogglePin+0x3c>
 536:	ba 01       	movw	r22, r20
 538:	62 27       	eor	r22, r18
 53a:	6b bb       	out	0x1b, r22	; 27
		break;
 53c:	08 95       	ret
		case'B':
		case'b':
			TOG_BIT(PORTB , PinNumber);
 53e:	28 b3       	in	r18, 0x18	; 24
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	ac 01       	movw	r20, r24
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_voidTogglePin+0x5a>
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_voidTogglePin+0x56>
 550:	ba 01       	movw	r22, r20
 552:	62 27       	eor	r22, r18
 554:	68 bb       	out	0x18, r22	; 24

		break;
 556:	08 95       	ret
		case'C':
		case'c':
			TOG_BIT(PORTC , PinNumber);
 558:	25 b3       	in	r18, 0x15	; 21
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	ac 01       	movw	r20, r24
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_voidTogglePin+0x74>
 562:	44 0f       	add	r20, r20
 564:	55 1f       	adc	r21, r21
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_voidTogglePin+0x70>
 56a:	ba 01       	movw	r22, r20
 56c:	62 27       	eor	r22, r18
 56e:	65 bb       	out	0x15, r22	; 21

		break;
 570:	08 95       	ret
		case'D':
		case'd':
			TOG_BIT(PORTD , PinNumber);
 572:	22 b3       	in	r18, 0x12	; 18
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	ac 01       	movw	r20, r24
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_voidTogglePin+0x8e>
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_voidTogglePin+0x8a>
 584:	ba 01       	movw	r22, r20
 586:	62 27       	eor	r22, r18
 588:	62 bb       	out	0x12, r22	; 18
 58a:	08 95       	ret

0000058c <DIO_voidSetPortDir>:
 * DESCRIPTION : Used to set  specific port as input or output
 * RETURN : No return
 */

void DIO_voidSetPortDir(uint8 PortName , uint8 value){
	switch(PortName){
 58c:	84 34       	cpi	r24, 0x44	; 68
 58e:	d9 f0       	breq	.+54     	; 0x5c6 <DIO_voidSetPortDir+0x3a>
 590:	85 34       	cpi	r24, 0x45	; 69
 592:	38 f4       	brcc	.+14     	; 0x5a2 <DIO_voidSetPortDir+0x16>
 594:	82 34       	cpi	r24, 0x42	; 66
 596:	99 f0       	breq	.+38     	; 0x5be <DIO_voidSetPortDir+0x32>
 598:	83 34       	cpi	r24, 0x43	; 67
 59a:	98 f4       	brcc	.+38     	; 0x5c2 <DIO_voidSetPortDir+0x36>
 59c:	81 34       	cpi	r24, 0x41	; 65
 59e:	a1 f4       	brne	.+40     	; 0x5c8 <DIO_voidSetPortDir+0x3c>
 5a0:	0c c0       	rjmp	.+24     	; 0x5ba <DIO_voidSetPortDir+0x2e>
 5a2:	82 36       	cpi	r24, 0x62	; 98
 5a4:	61 f0       	breq	.+24     	; 0x5be <DIO_voidSetPortDir+0x32>
 5a6:	83 36       	cpi	r24, 0x63	; 99
 5a8:	18 f4       	brcc	.+6      	; 0x5b0 <DIO_voidSetPortDir+0x24>
 5aa:	81 36       	cpi	r24, 0x61	; 97
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <DIO_voidSetPortDir+0x3c>
 5ae:	05 c0       	rjmp	.+10     	; 0x5ba <DIO_voidSetPortDir+0x2e>
 5b0:	83 36       	cpi	r24, 0x63	; 99
 5b2:	39 f0       	breq	.+14     	; 0x5c2 <DIO_voidSetPortDir+0x36>
 5b4:	84 36       	cpi	r24, 0x64	; 100
 5b6:	41 f4       	brne	.+16     	; 0x5c8 <DIO_voidSetPortDir+0x3c>
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <DIO_voidSetPortDir+0x3a>
		case'A':
		case'a':

			DDRA=value;
 5ba:	6a bb       	out	0x1a, r22	; 26

		break;
 5bc:	08 95       	ret

		case'B':
		case'b':

			DDRB=value;
 5be:	67 bb       	out	0x17, r22	; 23

		break;
 5c0:	08 95       	ret

		case'C':
		case'c':

			DDRC=value;
 5c2:	64 bb       	out	0x14, r22	; 20

		break;
 5c4:	08 95       	ret

		case'D':
		case'd':

			DDRD=value;
 5c6:	61 bb       	out	0x11, r22	; 17
 5c8:	08 95       	ret

000005ca <DIO_voidWritePort>:
 * DESCRIPTION : Used to write on  specific port as logic high or low
 * RETURN : No return
 */

void DIO_voidWritePort(uint8 PortName , uint8 value){
	switch(PortName){
 5ca:	84 34       	cpi	r24, 0x44	; 68
 5cc:	d9 f0       	breq	.+54     	; 0x604 <DIO_voidWritePort+0x3a>
 5ce:	85 34       	cpi	r24, 0x45	; 69
 5d0:	38 f4       	brcc	.+14     	; 0x5e0 <DIO_voidWritePort+0x16>
 5d2:	82 34       	cpi	r24, 0x42	; 66
 5d4:	99 f0       	breq	.+38     	; 0x5fc <DIO_voidWritePort+0x32>
 5d6:	83 34       	cpi	r24, 0x43	; 67
 5d8:	98 f4       	brcc	.+38     	; 0x600 <DIO_voidWritePort+0x36>
 5da:	81 34       	cpi	r24, 0x41	; 65
 5dc:	a1 f4       	brne	.+40     	; 0x606 <DIO_voidWritePort+0x3c>
 5de:	0c c0       	rjmp	.+24     	; 0x5f8 <DIO_voidWritePort+0x2e>
 5e0:	82 36       	cpi	r24, 0x62	; 98
 5e2:	61 f0       	breq	.+24     	; 0x5fc <DIO_voidWritePort+0x32>
 5e4:	83 36       	cpi	r24, 0x63	; 99
 5e6:	18 f4       	brcc	.+6      	; 0x5ee <DIO_voidWritePort+0x24>
 5e8:	81 36       	cpi	r24, 0x61	; 97
 5ea:	69 f4       	brne	.+26     	; 0x606 <DIO_voidWritePort+0x3c>
 5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <DIO_voidWritePort+0x2e>
 5ee:	83 36       	cpi	r24, 0x63	; 99
 5f0:	39 f0       	breq	.+14     	; 0x600 <DIO_voidWritePort+0x36>
 5f2:	84 36       	cpi	r24, 0x64	; 100
 5f4:	41 f4       	brne	.+16     	; 0x606 <DIO_voidWritePort+0x3c>
 5f6:	06 c0       	rjmp	.+12     	; 0x604 <DIO_voidWritePort+0x3a>
			case'A':
			case'a':

				PORTA=value;
 5f8:	6b bb       	out	0x1b, r22	; 27

			break;
 5fa:	08 95       	ret

			case'B':
			case'b':

				PORTB=value;
 5fc:	68 bb       	out	0x18, r22	; 24

			break;
 5fe:	08 95       	ret

			case'C':
			case'c':

				PORTC=value;
 600:	65 bb       	out	0x15, r22	; 21

			break;
 602:	08 95       	ret

			case'D':
			case'd':

				PORTD=value;
 604:	62 bb       	out	0x12, r22	; 18
 606:	08 95       	ret

00000608 <DIO_u8ReadPort>:
 * RETURN : Reading of the port
 */

uint8 DIO_u8ReadPort(uint8 PortName){
	uint8 value;
	switch(PortName){
 608:	84 34       	cpi	r24, 0x44	; 68
 60a:	d9 f0       	breq	.+54     	; 0x642 <DIO_u8ReadPort+0x3a>
 60c:	85 34       	cpi	r24, 0x45	; 69
 60e:	38 f4       	brcc	.+14     	; 0x61e <DIO_u8ReadPort+0x16>
 610:	82 34       	cpi	r24, 0x42	; 66
 612:	99 f0       	breq	.+38     	; 0x63a <DIO_u8ReadPort+0x32>
 614:	83 34       	cpi	r24, 0x43	; 67
 616:	98 f4       	brcc	.+38     	; 0x63e <DIO_u8ReadPort+0x36>
 618:	81 34       	cpi	r24, 0x41	; 65
 61a:	a1 f4       	brne	.+40     	; 0x644 <DIO_u8ReadPort+0x3c>
 61c:	0c c0       	rjmp	.+24     	; 0x636 <DIO_u8ReadPort+0x2e>
 61e:	82 36       	cpi	r24, 0x62	; 98
 620:	61 f0       	breq	.+24     	; 0x63a <DIO_u8ReadPort+0x32>
 622:	83 36       	cpi	r24, 0x63	; 99
 624:	18 f4       	brcc	.+6      	; 0x62c <DIO_u8ReadPort+0x24>
 626:	81 36       	cpi	r24, 0x61	; 97
 628:	69 f4       	brne	.+26     	; 0x644 <DIO_u8ReadPort+0x3c>
 62a:	05 c0       	rjmp	.+10     	; 0x636 <DIO_u8ReadPort+0x2e>
 62c:	83 36       	cpi	r24, 0x63	; 99
 62e:	39 f0       	breq	.+14     	; 0x63e <DIO_u8ReadPort+0x36>
 630:	84 36       	cpi	r24, 0x64	; 100
 632:	41 f4       	brne	.+16     	; 0x644 <DIO_u8ReadPort+0x3c>
 634:	06 c0       	rjmp	.+12     	; 0x642 <DIO_u8ReadPort+0x3a>
		case'A':
		case'a':
			value=PINA;
 636:	99 b3       	in	r25, 0x19	; 25
		break;
 638:	05 c0       	rjmp	.+10     	; 0x644 <DIO_u8ReadPort+0x3c>
		case'B':
		case'b':
			value=PINB;
 63a:	96 b3       	in	r25, 0x16	; 22

		break;
 63c:	03 c0       	rjmp	.+6      	; 0x644 <DIO_u8ReadPort+0x3c>
		case'C':
		case'c':
			value=PINC;
 63e:	93 b3       	in	r25, 0x13	; 19

		break;
 640:	01 c0       	rjmp	.+2      	; 0x644 <DIO_u8ReadPort+0x3c>
		case'D':
		case'd':
			value=PIND;
 642:	90 b3       	in	r25, 0x10	; 16
		default:
		break;

	}
	return value;
}
 644:	89 2f       	mov	r24, r25
 646:	08 95       	ret

00000648 <DIO_voidTogglePort>:
 * DESCRIPTION : Used to toggle specific port
 * RETURN : No return
 */

void DIO_voidTogglePort(uint8 PortName){
	switch(PortName){
 648:	84 34       	cpi	r24, 0x44	; 68
 64a:	09 f1       	breq	.+66     	; 0x68e <DIO_voidTogglePort+0x46>
 64c:	85 34       	cpi	r24, 0x45	; 69
 64e:	38 f4       	brcc	.+14     	; 0x65e <DIO_voidTogglePort+0x16>
 650:	82 34       	cpi	r24, 0x42	; 66
 652:	a9 f0       	breq	.+42     	; 0x67e <DIO_voidTogglePort+0x36>
 654:	83 34       	cpi	r24, 0x43	; 67
 656:	b8 f4       	brcc	.+46     	; 0x686 <DIO_voidTogglePort+0x3e>
 658:	81 34       	cpi	r24, 0x41	; 65
 65a:	e1 f4       	brne	.+56     	; 0x694 <DIO_voidTogglePort+0x4c>
 65c:	0c c0       	rjmp	.+24     	; 0x676 <DIO_voidTogglePort+0x2e>
 65e:	82 36       	cpi	r24, 0x62	; 98
 660:	71 f0       	breq	.+28     	; 0x67e <DIO_voidTogglePort+0x36>
 662:	83 36       	cpi	r24, 0x63	; 99
 664:	18 f4       	brcc	.+6      	; 0x66c <DIO_voidTogglePort+0x24>
 666:	81 36       	cpi	r24, 0x61	; 97
 668:	a9 f4       	brne	.+42     	; 0x694 <DIO_voidTogglePort+0x4c>
 66a:	05 c0       	rjmp	.+10     	; 0x676 <DIO_voidTogglePort+0x2e>
 66c:	83 36       	cpi	r24, 0x63	; 99
 66e:	59 f0       	breq	.+22     	; 0x686 <DIO_voidTogglePort+0x3e>
 670:	84 36       	cpi	r24, 0x64	; 100
 672:	81 f4       	brne	.+32     	; 0x694 <DIO_voidTogglePort+0x4c>
 674:	0c c0       	rjmp	.+24     	; 0x68e <DIO_voidTogglePort+0x46>
		case'A':
		case'a':
			TOG_REG(PORTA);
 676:	8b b3       	in	r24, 0x1b	; 27
 678:	80 95       	com	r24
 67a:	8b bb       	out	0x1b, r24	; 27
		break;
 67c:	08 95       	ret
		case'B':
		case'b':
			TOG_REG(PORTB);
 67e:	88 b3       	in	r24, 0x18	; 24
 680:	80 95       	com	r24
 682:	88 bb       	out	0x18, r24	; 24

		break;
 684:	08 95       	ret
		case'C':
		case'c':
			TOG_REG(PORTC);
 686:	85 b3       	in	r24, 0x15	; 21
 688:	80 95       	com	r24
 68a:	85 bb       	out	0x15, r24	; 21

		break;
 68c:	08 95       	ret
		case'D':
		case'd':
			TOG_REG(PORTD);
 68e:	82 b3       	in	r24, 0x12	; 18
 690:	80 95       	com	r24
 692:	82 bb       	out	0x12, r24	; 18
 694:	08 95       	ret

00000696 <DIO_voidWriteNibble>:
 * DESCRIPTION : Used to toggle specific port
 * RETURN : No return
 */

void DIO_voidWriteNibble(uint8 PortName , uint8 value ,uint8 nibble){
	value&=0x0f; // to take only first 4 bits
 696:	6f 70       	andi	r22, 0x0F	; 15

	if(nibble){ //last 4 PINS
 698:	44 23       	and	r20, r20
 69a:	c1 f1       	breq	.+112    	; 0x70c <DIO_voidWriteNibble+0x76>
	value=value<<4;
 69c:	62 95       	swap	r22
 69e:	60 7f       	andi	r22, 0xF0	; 240
	switch(PortName){
 6a0:	84 34       	cpi	r24, 0x44	; 68
 6a2:	69 f1       	breq	.+90     	; 0x6fe <DIO_voidWriteNibble+0x68>
 6a4:	85 34       	cpi	r24, 0x45	; 69
 6a6:	40 f4       	brcc	.+16     	; 0x6b8 <DIO_voidWriteNibble+0x22>
 6a8:	82 34       	cpi	r24, 0x42	; 66
 6aa:	d9 f0       	breq	.+54     	; 0x6e2 <DIO_voidWriteNibble+0x4c>
 6ac:	83 34       	cpi	r24, 0x43	; 67
 6ae:	00 f5       	brcc	.+64     	; 0x6f0 <DIO_voidWriteNibble+0x5a>
 6b0:	81 34       	cpi	r24, 0x41	; 65
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <DIO_voidWriteNibble+0x20>
 6b4:	5d c0       	rjmp	.+186    	; 0x770 <DIO_voidWriteNibble+0xda>
 6b6:	0e c0       	rjmp	.+28     	; 0x6d4 <DIO_voidWriteNibble+0x3e>
 6b8:	82 36       	cpi	r24, 0x62	; 98
 6ba:	99 f0       	breq	.+38     	; 0x6e2 <DIO_voidWriteNibble+0x4c>
 6bc:	83 36       	cpi	r24, 0x63	; 99
 6be:	20 f4       	brcc	.+8      	; 0x6c8 <DIO_voidWriteNibble+0x32>
 6c0:	81 36       	cpi	r24, 0x61	; 97
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <DIO_voidWriteNibble+0x30>
 6c4:	55 c0       	rjmp	.+170    	; 0x770 <DIO_voidWriteNibble+0xda>
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <DIO_voidWriteNibble+0x3e>
 6c8:	83 36       	cpi	r24, 0x63	; 99
 6ca:	91 f0       	breq	.+36     	; 0x6f0 <DIO_voidWriteNibble+0x5a>
 6cc:	84 36       	cpi	r24, 0x64	; 100
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <DIO_voidWriteNibble+0x3c>
 6d0:	4f c0       	rjmp	.+158    	; 0x770 <DIO_voidWriteNibble+0xda>
 6d2:	15 c0       	rjmp	.+42     	; 0x6fe <DIO_voidWriteNibble+0x68>
			case'A':
			case'a':

				PORTA&=0x0f;
 6d4:	8b b3       	in	r24, 0x1b	; 27
 6d6:	8f 70       	andi	r24, 0x0F	; 15
 6d8:	8b bb       	out	0x1b, r24	; 27
				PORTA|=value;
 6da:	8b b3       	in	r24, 0x1b	; 27
 6dc:	68 2b       	or	r22, r24
 6de:	6b bb       	out	0x1b, r22	; 27


			break;
 6e0:	08 95       	ret

			case'B':
			case'b':
				PORTB&=0x0f;
 6e2:	88 b3       	in	r24, 0x18	; 24
 6e4:	8f 70       	andi	r24, 0x0F	; 15
 6e6:	88 bb       	out	0x18, r24	; 24
				PORTB|=value;
 6e8:	88 b3       	in	r24, 0x18	; 24
 6ea:	68 2b       	or	r22, r24
 6ec:	68 bb       	out	0x18, r22	; 24

			break;
 6ee:	08 95       	ret

			case'C':
			case'c':
				PORTC&=0x0f;
 6f0:	85 b3       	in	r24, 0x15	; 21
 6f2:	8f 70       	andi	r24, 0x0F	; 15
 6f4:	85 bb       	out	0x15, r24	; 21
				PORTC|=value;
 6f6:	85 b3       	in	r24, 0x15	; 21
 6f8:	68 2b       	or	r22, r24
 6fa:	65 bb       	out	0x15, r22	; 21

			break;
 6fc:	08 95       	ret

			case'D':
			case'd':
				PORTD&=0x0f;
 6fe:	82 b3       	in	r24, 0x12	; 18
 700:	8f 70       	andi	r24, 0x0F	; 15
 702:	82 bb       	out	0x12, r24	; 18
				PORTD|=value;
 704:	82 b3       	in	r24, 0x12	; 18
 706:	68 2b       	or	r22, r24
 708:	62 bb       	out	0x12, r22	; 18

			break;
 70a:	08 95       	ret
			default:
				break;
	}}
	else{
		switch(PortName){
 70c:	84 34       	cpi	r24, 0x44	; 68
 70e:	51 f1       	breq	.+84     	; 0x764 <DIO_voidWriteNibble+0xce>
 710:	85 34       	cpi	r24, 0x45	; 69
 712:	38 f4       	brcc	.+14     	; 0x722 <DIO_voidWriteNibble+0x8c>
 714:	82 34       	cpi	r24, 0x42	; 66
 716:	c1 f0       	breq	.+48     	; 0x748 <DIO_voidWriteNibble+0xb2>
 718:	83 34       	cpi	r24, 0x43	; 67
 71a:	e8 f4       	brcc	.+58     	; 0x756 <DIO_voidWriteNibble+0xc0>
 71c:	81 34       	cpi	r24, 0x41	; 65
 71e:	41 f5       	brne	.+80     	; 0x770 <DIO_voidWriteNibble+0xda>
 720:	0c c0       	rjmp	.+24     	; 0x73a <DIO_voidWriteNibble+0xa4>
 722:	82 36       	cpi	r24, 0x62	; 98
 724:	89 f0       	breq	.+34     	; 0x748 <DIO_voidWriteNibble+0xb2>
 726:	83 36       	cpi	r24, 0x63	; 99
 728:	18 f4       	brcc	.+6      	; 0x730 <DIO_voidWriteNibble+0x9a>
 72a:	81 36       	cpi	r24, 0x61	; 97
 72c:	09 f5       	brne	.+66     	; 0x770 <DIO_voidWriteNibble+0xda>
 72e:	05 c0       	rjmp	.+10     	; 0x73a <DIO_voidWriteNibble+0xa4>
 730:	83 36       	cpi	r24, 0x63	; 99
 732:	89 f0       	breq	.+34     	; 0x756 <DIO_voidWriteNibble+0xc0>
 734:	84 36       	cpi	r24, 0x64	; 100
 736:	e1 f4       	brne	.+56     	; 0x770 <DIO_voidWriteNibble+0xda>
 738:	15 c0       	rjmp	.+42     	; 0x764 <DIO_voidWriteNibble+0xce>
			case'A':
			case'a':

					PORTA&=0xf0;
 73a:	8b b3       	in	r24, 0x1b	; 27
 73c:	80 7f       	andi	r24, 0xF0	; 240
 73e:	8b bb       	out	0x1b, r24	; 27
					PORTA|=value;
 740:	8b b3       	in	r24, 0x1b	; 27
 742:	68 2b       	or	r22, r24
 744:	6b bb       	out	0x1b, r22	; 27


			break;
 746:	08 95       	ret

		    case'B':
			case'b':
					PORTB&=0xf0;
 748:	88 b3       	in	r24, 0x18	; 24
 74a:	80 7f       	andi	r24, 0xF0	; 240
 74c:	88 bb       	out	0x18, r24	; 24
					PORTB|=value;
 74e:	88 b3       	in	r24, 0x18	; 24
 750:	68 2b       	or	r22, r24
 752:	68 bb       	out	0x18, r22	; 24

			break;
 754:	08 95       	ret

			case'C':
			case'c':
					PORTC&=0xf0;
 756:	85 b3       	in	r24, 0x15	; 21
 758:	80 7f       	andi	r24, 0xF0	; 240
 75a:	85 bb       	out	0x15, r24	; 21
					PORTC|=value;
 75c:	85 b3       	in	r24, 0x15	; 21
 75e:	68 2b       	or	r22, r24
 760:	65 bb       	out	0x15, r22	; 21

			break;
 762:	08 95       	ret

			case'D':
			case'd':
					PORTD&=0xf0;
 764:	82 b3       	in	r24, 0x12	; 18
 766:	80 7f       	andi	r24, 0xF0	; 240
 768:	82 bb       	out	0x12, r24	; 18
					PORTD|=value;
 76a:	82 b3       	in	r24, 0x12	; 18
 76c:	68 2b       	or	r22, r24
 76e:	62 bb       	out	0x12, r22	; 18
 770:	08 95       	ret

00000772 <DIO_voidConnectPullUp>:
	 * DDRx N must be INPUT
	 * PORT xN =1
 * RETURN : No return
 */
void DIO_voidConnectPullUp(uint8 PortName , uint8 PinNumber , uint8 connect){
	DIO_voidWritePin(PortName,PinNumber,connect);
 772:	0e 94 80 01 	call	0x300	; 0x300 <DIO_voidWritePin>


}
 776:	08 95       	ret

00000778 <Enable>:
#define SHIFT_DISPLAY2LEFT_COM 0X18
#define SHIFT_DISPLAY2RIGHT_COM 0X1C
#define CGROM_COM 0x40

static void Enable(void){
	DIO_voidWritePin(EPORT,EPIN,HIGH);
 778:	83 e4       	ldi	r24, 0x43	; 67
 77a:	63 e0       	ldi	r22, 0x03	; 3
 77c:	41 e0       	ldi	r20, 0x01	; 1
 77e:	0e 94 80 01 	call	0x300	; 0x300 <DIO_voidWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 782:	83 ef       	ldi	r24, 0xF3	; 243
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	01 97       	sbiw	r24, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <Enable+0xe>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <Enable+0x14>
 78c:	00 00       	nop
	_delay_ms(2);
	DIO_voidWritePin(EPORT,EPIN,LOW);
 78e:	83 e4       	ldi	r24, 0x43	; 67
 790:	63 e0       	ldi	r22, 0x03	; 3
 792:	40 e0       	ldi	r20, 0x00	; 0
 794:	0e 94 80 01 	call	0x300	; 0x300 <DIO_voidWritePin>
 798:	83 ef       	ldi	r24, 0xF3	; 243
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	01 97       	sbiw	r24, 0x01	; 1
 79e:	f1 f7       	brne	.-4      	; 0x79c <Enable+0x24>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <Enable+0x2a>
 7a2:	00 00       	nop
	_delay_ms(2);
}
 7a4:	08 95       	ret

000007a6 <LCD_vSendCmd>:
	LCD_vSendCmd(DISPLAYON_CURSOROFF_COM);
	LCD_vSendCmd(MOVE_2RIGHT_COM);
	
	
}
void LCD_vSendCmd(uint8 command){
 7a6:	cf 93       	push	r28
 7a8:	c8 2f       	mov	r28, r24
	DIO_voidWritePin(RWPORT,RWPIN,LOW);
 7aa:	83 e4       	ldi	r24, 0x43	; 67
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	0e 94 80 01 	call	0x300	; 0x300 <DIO_voidWritePin>
	DIO_voidWritePort(PORT_8MODE,command);
	DIO_voidWritePin(RSPORT,RSPIN,LOW);
	Enable();
	_delay_ms(1);
	#else
	DIO_voidWriteNibble(PORT_4MODE,command>>4,LAST4);
 7b4:	6c 2f       	mov	r22, r28
 7b6:	62 95       	swap	r22
 7b8:	6f 70       	andi	r22, 0x0F	; 15
 7ba:	84 e4       	ldi	r24, 0x44	; 68
 7bc:	41 e0       	ldi	r20, 0x01	; 1
 7be:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_voidWriteNibble>
	DIO_voidWritePin(RSPORT,RSPIN,LOW);
 7c2:	83 e4       	ldi	r24, 0x43	; 67
 7c4:	61 e0       	ldi	r22, 0x01	; 1
 7c6:	40 e0       	ldi	r20, 0x00	; 0
 7c8:	0e 94 80 01 	call	0x300	; 0x300 <DIO_voidWritePin>
	Enable();
 7cc:	0e 94 bc 03 	call	0x778	; 0x778 <Enable>
	DIO_voidWriteNibble(PORT_4MODE,command,LAST4);
 7d0:	84 e4       	ldi	r24, 0x44	; 68
 7d2:	6c 2f       	mov	r22, r28
 7d4:	41 e0       	ldi	r20, 0x01	; 1
 7d6:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_voidWriteNibble>
	Enable();
 7da:	0e 94 bc 03 	call	0x778	; 0x778 <Enable>
	#endif
	
}
 7de:	cf 91       	pop	r28
 7e0:	08 95       	ret

000007e2 <LCD_vInit>:
	DIO_voidWritePin(EPORT,EPIN,HIGH);
	_delay_ms(2);
	DIO_voidWritePin(EPORT,EPIN,LOW);
	_delay_ms(2);
}
void LCD_vInit(void){
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
	DIO_voidSetPortDir(PORT_8MODE,0XFF);
 7e6:	84 e4       	ldi	r24, 0x44	; 68
 7e8:	6f ef       	ldi	r22, 0xFF	; 255
 7ea:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_voidSetPortDir>
	DIO_voidSetPinDir(RSPORT,RSPIN,OUTPUT_PIN);
 7ee:	83 e4       	ldi	r24, 0x43	; 67
 7f0:	61 e0       	ldi	r22, 0x01	; 1
 7f2:	41 e0       	ldi	r20, 0x01	; 1
 7f4:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_voidSetPinDir>
	DIO_voidSetPinDir(RWPORT,RWPIN,OUTPUT_PIN);
 7f8:	83 e4       	ldi	r24, 0x43	; 67
 7fa:	62 e0       	ldi	r22, 0x02	; 2
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_voidSetPinDir>
	DIO_voidSetPinDir(EPORT,EPIN,OUTPUT_PIN);
 802:	83 e4       	ldi	r24, 0x43	; 67
 804:	63 e0       	ldi	r22, 0x03	; 3
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_voidSetPinDir>
	
	#ifdef EIGHT_BIT_MODE
	LCD_vSendCmd(EIGHT_BIT_COM);
	#else
	LCD_vSendCmd(RETURN_HOME);
 80c:	c3 ed       	ldi	r28, 0xD3	; 211
 80e:	d3 e0       	ldi	r29, 0x03	; 3
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	fe 01       	movw	r30, r28
 816:	09 95       	icall
	LCD_vSendCmd(FOUR_BIT_COM);
 818:	88 e2       	ldi	r24, 0x28	; 40
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	fe 01       	movw	r30, r28
 81e:	09 95       	icall
	#endif
	
	LCD_vSendCmd(CLRCOM);
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	fe 01       	movw	r30, r28
 826:	09 95       	icall
	LCD_vSendCmd(DISPLAYON_CURSOROFF_COM);
 828:	8c e0       	ldi	r24, 0x0C	; 12
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	fe 01       	movw	r30, r28
 82e:	09 95       	icall
	LCD_vSendCmd(MOVE_2RIGHT_COM);
 830:	86 e0       	ldi	r24, 0x06	; 6
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	fe 01       	movw	r30, r28
 836:	09 95       	icall
	
	
}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <LCD_vSendData>:
	DIO_voidWriteNibble(PORT_4MODE,command,LAST4);
	Enable();
	#endif
	
}
void LCD_vSendData(uint8 data){
 83e:	cf 93       	push	r28
 840:	c8 2f       	mov	r28, r24
	DIO_voidWritePin(RWPORT,RWPIN,LOW);
 842:	83 e4       	ldi	r24, 0x43	; 67
 844:	62 e0       	ldi	r22, 0x02	; 2
 846:	40 e0       	ldi	r20, 0x00	; 0
 848:	0e 94 80 01 	call	0x300	; 0x300 <DIO_voidWritePin>
	#ifdef EIGHT_BIT_MODE
	DIO_voidWritePort(PORT_8MODE,data);
	DIO_voidWritePin(RSPORT,RSPIN,HIGH);
	Enable();
	#else
	DIO_voidWriteNibble(PORT_4MODE,data>>4,LAST4);
 84c:	6c 2f       	mov	r22, r28
 84e:	62 95       	swap	r22
 850:	6f 70       	andi	r22, 0x0F	; 15
 852:	84 e4       	ldi	r24, 0x44	; 68
 854:	41 e0       	ldi	r20, 0x01	; 1
 856:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_voidWriteNibble>
	DIO_voidWritePin(RSPORT,RSPIN,HIGH);
 85a:	83 e4       	ldi	r24, 0x43	; 67
 85c:	61 e0       	ldi	r22, 0x01	; 1
 85e:	41 e0       	ldi	r20, 0x01	; 1
 860:	0e 94 80 01 	call	0x300	; 0x300 <DIO_voidWritePin>
	Enable();
 864:	0e 94 bc 03 	call	0x778	; 0x778 <Enable>
	DIO_voidWriteNibble(PORT_4MODE,data,LAST4);
 868:	84 e4       	ldi	r24, 0x44	; 68
 86a:	6c 2f       	mov	r22, r28
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_voidWriteNibble>
	Enable();
 872:	0e 94 bc 03 	call	0x778	; 0x778 <Enable>
	#endif
}
 876:	cf 91       	pop	r28
 878:	08 95       	ret

0000087a <LCD_vCLR>:
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_vSendCmd>
 880:	83 ec       	ldi	r24, 0xC3	; 195
 882:	99 e0       	ldi	r25, 0x09	; 9
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <LCD_vCLR+0xa>
 888:	00 c0       	rjmp	.+0      	; 0x88a <LCD_vCLR+0x10>
 88a:	00 00       	nop
	_delay_ms(10);
}
 88c:	08 95       	ret

0000088e <LCD_vSendString>:
void LCD_vSendString(uint8* ptr){
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	ec 01       	movw	r28, r24
	while(*ptr!=0){
 894:	88 81       	ld	r24, Y
 896:	88 23       	and	r24, r24
 898:	31 f0       	breq	.+12     	; 0x8a6 <LCD_vSendString+0x18>
}
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
	_delay_ms(10);
}
void LCD_vSendString(uint8* ptr){
 89a:	21 96       	adiw	r28, 0x01	; 1
	while(*ptr!=0){
		LCD_vSendData(*ptr);
 89c:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_vSendData>
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
	_delay_ms(10);
}
void LCD_vSendString(uint8* ptr){
	while(*ptr!=0){
 8a0:	89 91       	ld	r24, Y+
 8a2:	88 23       	and	r24, r24
 8a4:	d9 f7       	brne	.-10     	; 0x89c <LCD_vSendString+0xe>
		LCD_vSendData(*ptr);
		ptr++;
	}
}
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <LCD_vMoveCursor>:
void LCD_vMoveCursor(uint8 row ,uint8 column){
	uint8 data;
	if((row>2)||(row<1)||(column<1)||(column>16)){
 8ac:	28 2f       	mov	r18, r24
 8ae:	21 50       	subi	r18, 0x01	; 1
 8b0:	22 30       	cpi	r18, 0x02	; 2
 8b2:	70 f4       	brcc	.+28     	; 0x8d0 <LCD_vMoveCursor+0x24>
 8b4:	66 23       	and	r22, r22
 8b6:	71 f0       	breq	.+28     	; 0x8d4 <LCD_vMoveCursor+0x28>
 8b8:	61 31       	cpi	r22, 0x11	; 17
 8ba:	70 f4       	brcc	.+28     	; 0x8d8 <LCD_vMoveCursor+0x2c>
		data=FIRST_ROW_COM;
	}
	else if(row==1){
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	19 f4       	brne	.+6      	; 0x8c6 <LCD_vMoveCursor+0x1a>
		data=FIRST_ROW_COM+column-1;
 8c0:	96 2f       	mov	r25, r22
 8c2:	91 58       	subi	r25, 0x81	; 129
 8c4:	0a c0       	rjmp	.+20     	; 0x8da <LCD_vMoveCursor+0x2e>
	}
	else if(row==2){
 8c6:	82 30       	cpi	r24, 0x02	; 2
 8c8:	41 f4       	brne	.+16     	; 0x8da <LCD_vMoveCursor+0x2e>
		data=SECOND_ROW_COM+column-1;
 8ca:	96 2f       	mov	r25, r22
 8cc:	91 54       	subi	r25, 0x41	; 65
 8ce:	05 c0       	rjmp	.+10     	; 0x8da <LCD_vMoveCursor+0x2e>
	}
}
void LCD_vMoveCursor(uint8 row ,uint8 column){
	uint8 data;
	if((row>2)||(row<1)||(column<1)||(column>16)){
		data=FIRST_ROW_COM;
 8d0:	90 e8       	ldi	r25, 0x80	; 128
 8d2:	03 c0       	rjmp	.+6      	; 0x8da <LCD_vMoveCursor+0x2e>
 8d4:	90 e8       	ldi	r25, 0x80	; 128
 8d6:	01 c0       	rjmp	.+2      	; 0x8da <LCD_vMoveCursor+0x2e>
 8d8:	90 e8       	ldi	r25, 0x80	; 128
		data=SECOND_ROW_COM+column-1;
	}
	else{
		
	}
	LCD_vSendCmd(data);
 8da:	89 2f       	mov	r24, r25
 8dc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_vSendCmd>
}
 8e0:	08 95       	ret

000008e2 <_exit>:
 8e2:	f8 94       	cli

000008e4 <__stop_program>:
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <__stop_program>
