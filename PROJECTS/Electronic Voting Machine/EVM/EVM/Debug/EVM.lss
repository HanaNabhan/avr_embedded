
EVM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aaa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000aaa  00000b1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00001298  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c69  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000464  00000000  00000000  00002001  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000813  00000000  00000000  00002465  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ea  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000076d  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1d 03 	call	0x63a	; 0x63a <main>
  8a:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_voidINIT>:
#include"STD_MACROS.h"
#include"DIO.h"
#include"BUTTON.h"

void BUTTON_voidINIT(uint8 port , uint8 pin){
	DIO_voidSetPinDir(port,pin,INPUT_PIN);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_voidSetPinDir>
}
  98:	08 95       	ret

0000009a <BUTTON_u8Read>:
uint8 BUTTON_u8Read(uint8 port ,uint8 pin){
	return DIO_u8ReadPin(port,pin);
  9a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_u8ReadPin>
}
  9e:	08 95       	ret

000000a0 <DIO_voidSetPinDir>:
 * RETURN : No return
 */


void DIO_voidSetPinDir(uint8 PortName , uint8 PinNumber , DIOPinDIR value){
	switch(PortName){
  a0:	84 34       	cpi	r24, 0x44	; 68
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_voidSetPinDir+0x6>
  a4:	71 c0       	rjmp	.+226    	; 0x188 <DIO_voidSetPinDir+0xe8>
  a6:	85 34       	cpi	r24, 0x45	; 69
  a8:	48 f4       	brcc	.+18     	; 0xbc <DIO_voidSetPinDir+0x1c>
  aa:	82 34       	cpi	r24, 0x42	; 66
  ac:	99 f1       	breq	.+102    	; 0x114 <DIO_voidSetPinDir+0x74>
  ae:	83 34       	cpi	r24, 0x43	; 67
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_voidSetPinDir+0x14>
  b2:	4d c0       	rjmp	.+154    	; 0x14e <DIO_voidSetPinDir+0xae>
  b4:	81 34       	cpi	r24, 0x41	; 65
  b6:	09 f0       	breq	.+2      	; 0xba <DIO_voidSetPinDir+0x1a>
  b8:	83 c0       	rjmp	.+262    	; 0x1c0 <DIO_voidSetPinDir+0x120>
  ba:	0f c0       	rjmp	.+30     	; 0xda <DIO_voidSetPinDir+0x3a>
  bc:	82 36       	cpi	r24, 0x62	; 98
  be:	51 f1       	breq	.+84     	; 0x114 <DIO_voidSetPinDir+0x74>
  c0:	83 36       	cpi	r24, 0x63	; 99
  c2:	20 f4       	brcc	.+8      	; 0xcc <DIO_voidSetPinDir+0x2c>
  c4:	81 36       	cpi	r24, 0x61	; 97
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_voidSetPinDir+0x2a>
  c8:	7b c0       	rjmp	.+246    	; 0x1c0 <DIO_voidSetPinDir+0x120>
  ca:	07 c0       	rjmp	.+14     	; 0xda <DIO_voidSetPinDir+0x3a>
  cc:	83 36       	cpi	r24, 0x63	; 99
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_voidSetPinDir+0x32>
  d0:	3e c0       	rjmp	.+124    	; 0x14e <DIO_voidSetPinDir+0xae>
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	09 f0       	breq	.+2      	; 0xd8 <DIO_voidSetPinDir+0x38>
  d6:	74 c0       	rjmp	.+232    	; 0x1c0 <DIO_voidSetPinDir+0x120>
  d8:	57 c0       	rjmp	.+174    	; 0x188 <DIO_voidSetPinDir+0xe8>
		case'A':
		case'a':
			if(value == OUTPUT_PIN){
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	69 f4       	brne	.+26     	; 0xf8 <DIO_voidSetPinDir+0x58>

				SET_BIT( DDRA , PinNumber);
  de:	2a b3       	in	r18, 0x1a	; 26
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	ac 01       	movw	r20, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_voidSetPinDir+0x4c>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_voidSetPinDir+0x48>
  f0:	ba 01       	movw	r22, r20
  f2:	62 2b       	or	r22, r18
  f4:	6a bb       	out	0x1a, r22	; 26
  f6:	08 95       	ret

			}
			else{

				CLR_BIT( DDRA , PinNumber);
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	ac 01       	movw	r20, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinDir+0x66>
 102:	44 0f       	add	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinDir+0x62>
 10a:	ba 01       	movw	r22, r20
 10c:	60 95       	com	r22
 10e:	62 23       	and	r22, r18
 110:	6a bb       	out	0x1a, r22	; 26
 112:	08 95       	ret

			}
		break;
		case'B':
		case'b':
			if(value == OUTPUT_PIN){
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <DIO_voidSetPinDir+0x92>

				SET_BIT( DDRB , PinNumber);
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_voidSetPinDir+0x86>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_voidSetPinDir+0x82>
 12a:	ba 01       	movw	r22, r20
 12c:	62 2b       	or	r22, r18
 12e:	67 bb       	out	0x17, r22	; 23
 130:	08 95       	ret

			}
			else{

				CLR_BIT( DDRB , PinNumber);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDir+0xa0>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDir+0x9c>
 144:	ba 01       	movw	r22, r20
 146:	60 95       	com	r22
 148:	62 23       	and	r22, r18
 14a:	67 bb       	out	0x17, r22	; 23
 14c:	08 95       	ret

			}
		break;
		case'C':
		case'c':
			if(value == OUTPUT_PIN){
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	69 f4       	brne	.+26     	; 0x16c <DIO_voidSetPinDir+0xcc>

				SET_BIT( DDRC , PinNumber);
 152:	24 b3       	in	r18, 0x14	; 20
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinDir+0xc0>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinDir+0xbc>
 164:	ba 01       	movw	r22, r20
 166:	62 2b       	or	r22, r18
 168:	64 bb       	out	0x14, r22	; 20
 16a:	08 95       	ret

			}
			else{

				CLR_BIT( DDRC , PinNumber);
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ac 01       	movw	r20, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_voidSetPinDir+0xda>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_voidSetPinDir+0xd6>
 17e:	ba 01       	movw	r22, r20
 180:	60 95       	com	r22
 182:	62 23       	and	r22, r18
 184:	64 bb       	out	0x14, r22	; 20
 186:	08 95       	ret

			}
		break;
		case'D':
		case'd':
			if(value == OUTPUT_PIN){
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	69 f4       	brne	.+26     	; 0x1a6 <DIO_voidSetPinDir+0x106>

				SET_BIT( DDRD , PinNumber);
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinDir+0xfa>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinDir+0xf6>
 19e:	ba 01       	movw	r22, r20
 1a0:	62 2b       	or	r22, r18
 1a2:	61 bb       	out	0x11, r22	; 17
 1a4:	08 95       	ret

			}
			else{

				CLR_BIT( DDRD , PinNumber);
 1a6:	21 b3       	in	r18, 0x11	; 17
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_voidSetPinDir+0x114>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_voidSetPinDir+0x110>
 1b8:	ba 01       	movw	r22, r20
 1ba:	60 95       	com	r22
 1bc:	62 23       	and	r22, r18
 1be:	61 bb       	out	0x11, r22	; 17
 1c0:	08 95       	ret

000001c2 <DIO_voidWritePin>:
 * DESCRIPTION : Used to write on specific pin from a specific port as logic high or low
 * RETURN : No return
 */

void DIO_voidWritePin(uint8 PortName , uint8 PinNumber , uint8 value){
	switch(PortName){
 1c2:	84 34       	cpi	r24, 0x44	; 68
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <DIO_voidWritePin+0x6>
 1c6:	71 c0       	rjmp	.+226    	; 0x2aa <DIO_voidWritePin+0xe8>
 1c8:	85 34       	cpi	r24, 0x45	; 69
 1ca:	48 f4       	brcc	.+18     	; 0x1de <DIO_voidWritePin+0x1c>
 1cc:	82 34       	cpi	r24, 0x42	; 66
 1ce:	99 f1       	breq	.+102    	; 0x236 <DIO_voidWritePin+0x74>
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <DIO_voidWritePin+0x14>
 1d4:	4d c0       	rjmp	.+154    	; 0x270 <DIO_voidWritePin+0xae>
 1d6:	81 34       	cpi	r24, 0x41	; 65
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_voidWritePin+0x1a>
 1da:	83 c0       	rjmp	.+262    	; 0x2e2 <DIO_voidWritePin+0x120>
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <DIO_voidWritePin+0x3a>
 1de:	82 36       	cpi	r24, 0x62	; 98
 1e0:	51 f1       	breq	.+84     	; 0x236 <DIO_voidWritePin+0x74>
 1e2:	83 36       	cpi	r24, 0x63	; 99
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <DIO_voidWritePin+0x2c>
 1e6:	81 36       	cpi	r24, 0x61	; 97
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_voidWritePin+0x2a>
 1ea:	7b c0       	rjmp	.+246    	; 0x2e2 <DIO_voidWritePin+0x120>
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <DIO_voidWritePin+0x3a>
 1ee:	83 36       	cpi	r24, 0x63	; 99
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <DIO_voidWritePin+0x32>
 1f2:	3e c0       	rjmp	.+124    	; 0x270 <DIO_voidWritePin+0xae>
 1f4:	84 36       	cpi	r24, 0x64	; 100
 1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_voidWritePin+0x38>
 1f8:	74 c0       	rjmp	.+232    	; 0x2e2 <DIO_voidWritePin+0x120>
 1fa:	57 c0       	rjmp	.+174    	; 0x2aa <DIO_voidWritePin+0xe8>
		case'A':
		case'a':
			if(value == HIGH){
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	69 f4       	brne	.+26     	; 0x21a <DIO_voidWritePin+0x58>

				SET_BIT( PORTA , PinNumber);
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_voidWritePin+0x4c>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_voidWritePin+0x48>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	6b bb       	out	0x1b, r22	; 27
 218:	08 95       	ret

			}
			else{

				CLR_BIT( PORTA , PinNumber);
 21a:	2b b3       	in	r18, 0x1b	; 27
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_voidWritePin+0x66>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_voidWritePin+0x62>
 22c:	ba 01       	movw	r22, r20
 22e:	60 95       	com	r22
 230:	62 23       	and	r22, r18
 232:	6b bb       	out	0x1b, r22	; 27
 234:	08 95       	ret

			}
		break;
		case'B':
		case'b':
			if(value == HIGH){
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	69 f4       	brne	.+26     	; 0x254 <DIO_voidWritePin+0x92>

				SET_BIT( PORTB , PinNumber);
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidWritePin+0x86>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidWritePin+0x82>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	68 bb       	out	0x18, r22	; 24
 252:	08 95       	ret

			}
			else{

				CLR_BIT( PORTB , PinNumber);
 254:	28 b3       	in	r18, 0x18	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidWritePin+0xa0>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidWritePin+0x9c>
 266:	ba 01       	movw	r22, r20
 268:	60 95       	com	r22
 26a:	62 23       	and	r22, r18
 26c:	68 bb       	out	0x18, r22	; 24
 26e:	08 95       	ret

			}
		break;
		case'C':
		case'c':
			if(value == HIGH){
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	69 f4       	brne	.+26     	; 0x28e <DIO_voidWritePin+0xcc>

				SET_BIT( PORTC , PinNumber);
 274:	25 b3       	in	r18, 0x15	; 21
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_voidWritePin+0xc0>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_voidWritePin+0xbc>
 286:	ba 01       	movw	r22, r20
 288:	62 2b       	or	r22, r18
 28a:	65 bb       	out	0x15, r22	; 21
 28c:	08 95       	ret

			}
			else{

				CLR_BIT( PORTC , PinNumber);
 28e:	25 b3       	in	r18, 0x15	; 21
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_voidWritePin+0xda>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_voidWritePin+0xd6>
 2a0:	ba 01       	movw	r22, r20
 2a2:	60 95       	com	r22
 2a4:	62 23       	and	r22, r18
 2a6:	65 bb       	out	0x15, r22	; 21
 2a8:	08 95       	ret

			}
		break;
		case'D':
		case'd':
			if(value == HIGH){
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	69 f4       	brne	.+26     	; 0x2c8 <DIO_voidWritePin+0x106>

				SET_BIT( PORTD , PinNumber);
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ac 01       	movw	r20, r24
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_voidWritePin+0xfa>
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_voidWritePin+0xf6>
 2c0:	ba 01       	movw	r22, r20
 2c2:	62 2b       	or	r22, r18
 2c4:	62 bb       	out	0x12, r22	; 18
 2c6:	08 95       	ret

			}
			else{

				CLR_BIT( PORTD , PinNumber);
 2c8:	22 b3       	in	r18, 0x12	; 18
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_voidWritePin+0x114>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_voidWritePin+0x110>
 2da:	ba 01       	movw	r22, r20
 2dc:	60 95       	com	r22
 2de:	62 23       	and	r22, r18
 2e0:	62 bb       	out	0x12, r22	; 18
 2e2:	08 95       	ret

000002e4 <DIO_u8ReadPin>:
 */


uint8 DIO_u8ReadPin(uint8 PortName , uint8 PinNumber){
	uint8 value;
	switch(PortName){
 2e4:	84 34       	cpi	r24, 0x44	; 68
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_u8ReadPin+0x6>
 2e8:	51 c0       	rjmp	.+162    	; 0x38c <DIO_u8ReadPin+0xa8>
 2ea:	85 34       	cpi	r24, 0x45	; 69
 2ec:	40 f4       	brcc	.+16     	; 0x2fe <DIO_u8ReadPin+0x1a>
 2ee:	82 34       	cpi	r24, 0x42	; 66
 2f0:	39 f1       	breq	.+78     	; 0x340 <DIO_u8ReadPin+0x5c>
 2f2:	83 34       	cpi	r24, 0x43	; 67
 2f4:	c0 f5       	brcc	.+112    	; 0x366 <DIO_u8ReadPin+0x82>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	09 f0       	breq	.+2      	; 0x2fc <DIO_u8ReadPin+0x18>
 2fa:	5a c0       	rjmp	.+180    	; 0x3b0 <DIO_u8ReadPin+0xcc>
 2fc:	0e c0       	rjmp	.+28     	; 0x31a <DIO_u8ReadPin+0x36>
 2fe:	82 36       	cpi	r24, 0x62	; 98
 300:	f9 f0       	breq	.+62     	; 0x340 <DIO_u8ReadPin+0x5c>
 302:	83 36       	cpi	r24, 0x63	; 99
 304:	20 f4       	brcc	.+8      	; 0x30e <DIO_u8ReadPin+0x2a>
 306:	81 36       	cpi	r24, 0x61	; 97
 308:	09 f0       	breq	.+2      	; 0x30c <DIO_u8ReadPin+0x28>
 30a:	52 c0       	rjmp	.+164    	; 0x3b0 <DIO_u8ReadPin+0xcc>
 30c:	06 c0       	rjmp	.+12     	; 0x31a <DIO_u8ReadPin+0x36>
 30e:	83 36       	cpi	r24, 0x63	; 99
 310:	51 f1       	breq	.+84     	; 0x366 <DIO_u8ReadPin+0x82>
 312:	84 36       	cpi	r24, 0x64	; 100
 314:	09 f0       	breq	.+2      	; 0x318 <DIO_u8ReadPin+0x34>
 316:	4c c0       	rjmp	.+152    	; 0x3b0 <DIO_u8ReadPin+0xcc>
 318:	39 c0       	rjmp	.+114    	; 0x38c <DIO_u8ReadPin+0xa8>
		case'A':
		case'a':
			value=READ_BIT(PINA , PinNumber);
 31a:	29 b3       	in	r18, 0x19	; 25
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	06 2e       	mov	r0, r22
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8ReadPin+0x44>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8ReadPin+0x40>
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	82 23       	and	r24, r18
 330:	93 23       	and	r25, r19
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_u8ReadPin+0x54>
 334:	95 95       	asr	r25
 336:	87 95       	ror	r24
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_u8ReadPin+0x50>
 33c:	98 2f       	mov	r25, r24
		break;
 33e:	38 c0       	rjmp	.+112    	; 0x3b0 <DIO_u8ReadPin+0xcc>
		case'B':
		case'b':
			value=READ_BIT(PINB , PinNumber);
 340:	26 b3       	in	r18, 0x16	; 22
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	06 2e       	mov	r0, r22
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8ReadPin+0x6a>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8ReadPin+0x66>
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	82 23       	and	r24, r18
 356:	93 23       	and	r25, r19
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_u8ReadPin+0x7a>
 35a:	95 95       	asr	r25
 35c:	87 95       	ror	r24
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_u8ReadPin+0x76>
 362:	98 2f       	mov	r25, r24

		break;
 364:	25 c0       	rjmp	.+74     	; 0x3b0 <DIO_u8ReadPin+0xcc>
		case'C':
		case'c':
			value=READ_BIT(PINC , PinNumber);
 366:	23 b3       	in	r18, 0x13	; 19
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	06 2e       	mov	r0, r22
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_u8ReadPin+0x90>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_u8ReadPin+0x8c>
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	82 23       	and	r24, r18
 37c:	93 23       	and	r25, r19
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_u8ReadPin+0xa0>
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_u8ReadPin+0x9c>
 388:	98 2f       	mov	r25, r24

		break;
 38a:	12 c0       	rjmp	.+36     	; 0x3b0 <DIO_u8ReadPin+0xcc>
		case'D':
		case'd':
			value=READ_BIT(PIND , PinNumber);
 38c:	20 b3       	in	r18, 0x10	; 16
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	06 2e       	mov	r0, r22
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8ReadPin+0xb6>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8ReadPin+0xb2>
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	82 23       	and	r24, r18
 3a2:	93 23       	and	r25, r19
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8ReadPin+0xc6>
 3a6:	95 95       	asr	r25
 3a8:	87 95       	ror	r24
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8ReadPin+0xc2>
 3ae:	98 2f       	mov	r25, r24
		default:
		break;

	}
	return value;
}
 3b0:	89 2f       	mov	r24, r25
 3b2:	08 95       	ret

000003b4 <DIO_voidTogglePin>:
 * ARGUMENTS : uint8 PortName , uint8 PinNumber
 * DESCRIPTION : Used to toggle specific pin from a specific port
 * RETURN : No return
 */
void DIO_voidTogglePin(uint8 PortName , uint8 PinNumber){
	switch(PortName){
 3b4:	84 34       	cpi	r24, 0x44	; 68
 3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_voidTogglePin+0x6>
 3b8:	3d c0       	rjmp	.+122    	; 0x434 <DIO_voidTogglePin+0x80>
 3ba:	85 34       	cpi	r24, 0x45	; 69
 3bc:	40 f4       	brcc	.+16     	; 0x3ce <DIO_voidTogglePin+0x1a>
 3be:	82 34       	cpi	r24, 0x42	; 66
 3c0:	f9 f0       	breq	.+62     	; 0x400 <DIO_voidTogglePin+0x4c>
 3c2:	83 34       	cpi	r24, 0x43	; 67
 3c4:	50 f5       	brcc	.+84     	; 0x41a <DIO_voidTogglePin+0x66>
 3c6:	81 34       	cpi	r24, 0x41	; 65
 3c8:	09 f0       	breq	.+2      	; 0x3cc <DIO_voidTogglePin+0x18>
 3ca:	40 c0       	rjmp	.+128    	; 0x44c <DIO_voidTogglePin+0x98>
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <DIO_voidTogglePin+0x32>
 3ce:	82 36       	cpi	r24, 0x62	; 98
 3d0:	b9 f0       	breq	.+46     	; 0x400 <DIO_voidTogglePin+0x4c>
 3d2:	83 36       	cpi	r24, 0x63	; 99
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_voidTogglePin+0x28>
 3d6:	81 36       	cpi	r24, 0x61	; 97
 3d8:	c9 f5       	brne	.+114    	; 0x44c <DIO_voidTogglePin+0x98>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_voidTogglePin+0x32>
 3dc:	83 36       	cpi	r24, 0x63	; 99
 3de:	e9 f0       	breq	.+58     	; 0x41a <DIO_voidTogglePin+0x66>
 3e0:	84 36       	cpi	r24, 0x64	; 100
 3e2:	a1 f5       	brne	.+104    	; 0x44c <DIO_voidTogglePin+0x98>
 3e4:	27 c0       	rjmp	.+78     	; 0x434 <DIO_voidTogglePin+0x80>
		case'A':
		case'a':
			TOG_BIT(PORTA , PinNumber);
 3e6:	2b b3       	in	r18, 0x1b	; 27
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	ac 01       	movw	r20, r24
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_voidTogglePin+0x40>
 3f0:	44 0f       	add	r20, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_voidTogglePin+0x3c>
 3f8:	ba 01       	movw	r22, r20
 3fa:	62 27       	eor	r22, r18
 3fc:	6b bb       	out	0x1b, r22	; 27
		break;
 3fe:	08 95       	ret
		case'B':
		case'b':
			TOG_BIT(PORTB , PinNumber);
 400:	28 b3       	in	r18, 0x18	; 24
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	ac 01       	movw	r20, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_voidTogglePin+0x5a>
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_voidTogglePin+0x56>
 412:	ba 01       	movw	r22, r20
 414:	62 27       	eor	r22, r18
 416:	68 bb       	out	0x18, r22	; 24

		break;
 418:	08 95       	ret
		case'C':
		case'c':
			TOG_BIT(PORTC , PinNumber);
 41a:	25 b3       	in	r18, 0x15	; 21
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	ac 01       	movw	r20, r24
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_voidTogglePin+0x74>
 424:	44 0f       	add	r20, r20
 426:	55 1f       	adc	r21, r21
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_voidTogglePin+0x70>
 42c:	ba 01       	movw	r22, r20
 42e:	62 27       	eor	r22, r18
 430:	65 bb       	out	0x15, r22	; 21

		break;
 432:	08 95       	ret
		case'D':
		case'd':
			TOG_BIT(PORTD , PinNumber);
 434:	22 b3       	in	r18, 0x12	; 18
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	ac 01       	movw	r20, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_voidTogglePin+0x8e>
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_voidTogglePin+0x8a>
 446:	ba 01       	movw	r22, r20
 448:	62 27       	eor	r22, r18
 44a:	62 bb       	out	0x12, r22	; 18
 44c:	08 95       	ret

0000044e <DIO_voidSetPortDir>:
 * DESCRIPTION : Used to set  specific port as input or output
 * RETURN : No return
 */

void DIO_voidSetPortDir(uint8 PortName , uint8 value){
	switch(PortName){
 44e:	84 34       	cpi	r24, 0x44	; 68
 450:	d9 f0       	breq	.+54     	; 0x488 <DIO_voidSetPortDir+0x3a>
 452:	85 34       	cpi	r24, 0x45	; 69
 454:	38 f4       	brcc	.+14     	; 0x464 <DIO_voidSetPortDir+0x16>
 456:	82 34       	cpi	r24, 0x42	; 66
 458:	99 f0       	breq	.+38     	; 0x480 <DIO_voidSetPortDir+0x32>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	98 f4       	brcc	.+38     	; 0x484 <DIO_voidSetPortDir+0x36>
 45e:	81 34       	cpi	r24, 0x41	; 65
 460:	a1 f4       	brne	.+40     	; 0x48a <DIO_voidSetPortDir+0x3c>
 462:	0c c0       	rjmp	.+24     	; 0x47c <DIO_voidSetPortDir+0x2e>
 464:	82 36       	cpi	r24, 0x62	; 98
 466:	61 f0       	breq	.+24     	; 0x480 <DIO_voidSetPortDir+0x32>
 468:	83 36       	cpi	r24, 0x63	; 99
 46a:	18 f4       	brcc	.+6      	; 0x472 <DIO_voidSetPortDir+0x24>
 46c:	81 36       	cpi	r24, 0x61	; 97
 46e:	69 f4       	brne	.+26     	; 0x48a <DIO_voidSetPortDir+0x3c>
 470:	05 c0       	rjmp	.+10     	; 0x47c <DIO_voidSetPortDir+0x2e>
 472:	83 36       	cpi	r24, 0x63	; 99
 474:	39 f0       	breq	.+14     	; 0x484 <DIO_voidSetPortDir+0x36>
 476:	84 36       	cpi	r24, 0x64	; 100
 478:	41 f4       	brne	.+16     	; 0x48a <DIO_voidSetPortDir+0x3c>
 47a:	06 c0       	rjmp	.+12     	; 0x488 <DIO_voidSetPortDir+0x3a>
		case'A':
		case'a':

			DDRA=value;
 47c:	6a bb       	out	0x1a, r22	; 26

		break;
 47e:	08 95       	ret

		case'B':
		case'b':

			DDRB=value;
 480:	67 bb       	out	0x17, r22	; 23

		break;
 482:	08 95       	ret

		case'C':
		case'c':

			DDRC=value;
 484:	64 bb       	out	0x14, r22	; 20

		break;
 486:	08 95       	ret

		case'D':
		case'd':

			DDRD=value;
 488:	61 bb       	out	0x11, r22	; 17
 48a:	08 95       	ret

0000048c <DIO_voidWritePort>:
 * DESCRIPTION : Used to write on  specific port as logic high or low
 * RETURN : No return
 */

void DIO_voidWritePort(uint8 PortName , uint8 value){
	switch(PortName){
 48c:	84 34       	cpi	r24, 0x44	; 68
 48e:	d9 f0       	breq	.+54     	; 0x4c6 <DIO_voidWritePort+0x3a>
 490:	85 34       	cpi	r24, 0x45	; 69
 492:	38 f4       	brcc	.+14     	; 0x4a2 <DIO_voidWritePort+0x16>
 494:	82 34       	cpi	r24, 0x42	; 66
 496:	99 f0       	breq	.+38     	; 0x4be <DIO_voidWritePort+0x32>
 498:	83 34       	cpi	r24, 0x43	; 67
 49a:	98 f4       	brcc	.+38     	; 0x4c2 <DIO_voidWritePort+0x36>
 49c:	81 34       	cpi	r24, 0x41	; 65
 49e:	a1 f4       	brne	.+40     	; 0x4c8 <DIO_voidWritePort+0x3c>
 4a0:	0c c0       	rjmp	.+24     	; 0x4ba <DIO_voidWritePort+0x2e>
 4a2:	82 36       	cpi	r24, 0x62	; 98
 4a4:	61 f0       	breq	.+24     	; 0x4be <DIO_voidWritePort+0x32>
 4a6:	83 36       	cpi	r24, 0x63	; 99
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <DIO_voidWritePort+0x24>
 4aa:	81 36       	cpi	r24, 0x61	; 97
 4ac:	69 f4       	brne	.+26     	; 0x4c8 <DIO_voidWritePort+0x3c>
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <DIO_voidWritePort+0x2e>
 4b0:	83 36       	cpi	r24, 0x63	; 99
 4b2:	39 f0       	breq	.+14     	; 0x4c2 <DIO_voidWritePort+0x36>
 4b4:	84 36       	cpi	r24, 0x64	; 100
 4b6:	41 f4       	brne	.+16     	; 0x4c8 <DIO_voidWritePort+0x3c>
 4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <DIO_voidWritePort+0x3a>
			case'A':
			case'a':

				PORTA=value;
 4ba:	6b bb       	out	0x1b, r22	; 27

			break;
 4bc:	08 95       	ret

			case'B':
			case'b':

				PORTB=value;
 4be:	68 bb       	out	0x18, r22	; 24

			break;
 4c0:	08 95       	ret

			case'C':
			case'c':

				PORTC=value;
 4c2:	65 bb       	out	0x15, r22	; 21

			break;
 4c4:	08 95       	ret

			case'D':
			case'd':

				PORTD=value;
 4c6:	62 bb       	out	0x12, r22	; 18
 4c8:	08 95       	ret

000004ca <DIO_u8ReadPort>:
 * RETURN : Reading of the port
 */

uint8 DIO_u8ReadPort(uint8 PortName){
	uint8 value;
	switch(PortName){
 4ca:	84 34       	cpi	r24, 0x44	; 68
 4cc:	d9 f0       	breq	.+54     	; 0x504 <DIO_u8ReadPort+0x3a>
 4ce:	85 34       	cpi	r24, 0x45	; 69
 4d0:	38 f4       	brcc	.+14     	; 0x4e0 <DIO_u8ReadPort+0x16>
 4d2:	82 34       	cpi	r24, 0x42	; 66
 4d4:	99 f0       	breq	.+38     	; 0x4fc <DIO_u8ReadPort+0x32>
 4d6:	83 34       	cpi	r24, 0x43	; 67
 4d8:	98 f4       	brcc	.+38     	; 0x500 <DIO_u8ReadPort+0x36>
 4da:	81 34       	cpi	r24, 0x41	; 65
 4dc:	a1 f4       	brne	.+40     	; 0x506 <DIO_u8ReadPort+0x3c>
 4de:	0c c0       	rjmp	.+24     	; 0x4f8 <DIO_u8ReadPort+0x2e>
 4e0:	82 36       	cpi	r24, 0x62	; 98
 4e2:	61 f0       	breq	.+24     	; 0x4fc <DIO_u8ReadPort+0x32>
 4e4:	83 36       	cpi	r24, 0x63	; 99
 4e6:	18 f4       	brcc	.+6      	; 0x4ee <DIO_u8ReadPort+0x24>
 4e8:	81 36       	cpi	r24, 0x61	; 97
 4ea:	69 f4       	brne	.+26     	; 0x506 <DIO_u8ReadPort+0x3c>
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <DIO_u8ReadPort+0x2e>
 4ee:	83 36       	cpi	r24, 0x63	; 99
 4f0:	39 f0       	breq	.+14     	; 0x500 <DIO_u8ReadPort+0x36>
 4f2:	84 36       	cpi	r24, 0x64	; 100
 4f4:	41 f4       	brne	.+16     	; 0x506 <DIO_u8ReadPort+0x3c>
 4f6:	06 c0       	rjmp	.+12     	; 0x504 <DIO_u8ReadPort+0x3a>
		case'A':
		case'a':
			value=PINA;
 4f8:	99 b3       	in	r25, 0x19	; 25
		break;
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <DIO_u8ReadPort+0x3c>
		case'B':
		case'b':
			value=PINB;
 4fc:	96 b3       	in	r25, 0x16	; 22

		break;
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <DIO_u8ReadPort+0x3c>
		case'C':
		case'c':
			value=PINC;
 500:	93 b3       	in	r25, 0x13	; 19

		break;
 502:	01 c0       	rjmp	.+2      	; 0x506 <DIO_u8ReadPort+0x3c>
		case'D':
		case'd':
			value=PIND;
 504:	90 b3       	in	r25, 0x10	; 16
		default:
		break;

	}
	return value;
}
 506:	89 2f       	mov	r24, r25
 508:	08 95       	ret

0000050a <DIO_voidTogglePort>:
 * DESCRIPTION : Used to toggle specific port
 * RETURN : No return
 */

void DIO_voidTogglePort(uint8 PortName){
	switch(PortName){
 50a:	84 34       	cpi	r24, 0x44	; 68
 50c:	09 f1       	breq	.+66     	; 0x550 <DIO_voidTogglePort+0x46>
 50e:	85 34       	cpi	r24, 0x45	; 69
 510:	38 f4       	brcc	.+14     	; 0x520 <DIO_voidTogglePort+0x16>
 512:	82 34       	cpi	r24, 0x42	; 66
 514:	a9 f0       	breq	.+42     	; 0x540 <DIO_voidTogglePort+0x36>
 516:	83 34       	cpi	r24, 0x43	; 67
 518:	b8 f4       	brcc	.+46     	; 0x548 <DIO_voidTogglePort+0x3e>
 51a:	81 34       	cpi	r24, 0x41	; 65
 51c:	e1 f4       	brne	.+56     	; 0x556 <DIO_voidTogglePort+0x4c>
 51e:	0c c0       	rjmp	.+24     	; 0x538 <DIO_voidTogglePort+0x2e>
 520:	82 36       	cpi	r24, 0x62	; 98
 522:	71 f0       	breq	.+28     	; 0x540 <DIO_voidTogglePort+0x36>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	18 f4       	brcc	.+6      	; 0x52e <DIO_voidTogglePort+0x24>
 528:	81 36       	cpi	r24, 0x61	; 97
 52a:	a9 f4       	brne	.+42     	; 0x556 <DIO_voidTogglePort+0x4c>
 52c:	05 c0       	rjmp	.+10     	; 0x538 <DIO_voidTogglePort+0x2e>
 52e:	83 36       	cpi	r24, 0x63	; 99
 530:	59 f0       	breq	.+22     	; 0x548 <DIO_voidTogglePort+0x3e>
 532:	84 36       	cpi	r24, 0x64	; 100
 534:	81 f4       	brne	.+32     	; 0x556 <DIO_voidTogglePort+0x4c>
 536:	0c c0       	rjmp	.+24     	; 0x550 <DIO_voidTogglePort+0x46>
		case'A':
		case'a':
			TOG_REG(PORTA);
 538:	8b b3       	in	r24, 0x1b	; 27
 53a:	80 95       	com	r24
 53c:	8b bb       	out	0x1b, r24	; 27
		break;
 53e:	08 95       	ret
		case'B':
		case'b':
			TOG_REG(PORTB);
 540:	88 b3       	in	r24, 0x18	; 24
 542:	80 95       	com	r24
 544:	88 bb       	out	0x18, r24	; 24

		break;
 546:	08 95       	ret
		case'C':
		case'c':
			TOG_REG(PORTC);
 548:	85 b3       	in	r24, 0x15	; 21
 54a:	80 95       	com	r24
 54c:	85 bb       	out	0x15, r24	; 21

		break;
 54e:	08 95       	ret
		case'D':
		case'd':
			TOG_REG(PORTD);
 550:	82 b3       	in	r24, 0x12	; 18
 552:	80 95       	com	r24
 554:	82 bb       	out	0x12, r24	; 18
 556:	08 95       	ret

00000558 <DIO_voidWriteNibble>:
 * DESCRIPTION : Used to toggle specific port
 * RETURN : No return
 */

void DIO_voidWriteNibble(uint8 PortName , uint8 value ,uint8 nibble){
	value&=0x0f; // to take only first 4 bits
 558:	6f 70       	andi	r22, 0x0F	; 15

	if(nibble){ //last 4 PINS
 55a:	44 23       	and	r20, r20
 55c:	c1 f1       	breq	.+112    	; 0x5ce <DIO_voidWriteNibble+0x76>
	value=value<<4;
 55e:	62 95       	swap	r22
 560:	60 7f       	andi	r22, 0xF0	; 240
	switch(PortName){
 562:	84 34       	cpi	r24, 0x44	; 68
 564:	69 f1       	breq	.+90     	; 0x5c0 <DIO_voidWriteNibble+0x68>
 566:	85 34       	cpi	r24, 0x45	; 69
 568:	40 f4       	brcc	.+16     	; 0x57a <DIO_voidWriteNibble+0x22>
 56a:	82 34       	cpi	r24, 0x42	; 66
 56c:	d9 f0       	breq	.+54     	; 0x5a4 <DIO_voidWriteNibble+0x4c>
 56e:	83 34       	cpi	r24, 0x43	; 67
 570:	00 f5       	brcc	.+64     	; 0x5b2 <DIO_voidWriteNibble+0x5a>
 572:	81 34       	cpi	r24, 0x41	; 65
 574:	09 f0       	breq	.+2      	; 0x578 <DIO_voidWriteNibble+0x20>
 576:	5d c0       	rjmp	.+186    	; 0x632 <DIO_voidWriteNibble+0xda>
 578:	0e c0       	rjmp	.+28     	; 0x596 <DIO_voidWriteNibble+0x3e>
 57a:	82 36       	cpi	r24, 0x62	; 98
 57c:	99 f0       	breq	.+38     	; 0x5a4 <DIO_voidWriteNibble+0x4c>
 57e:	83 36       	cpi	r24, 0x63	; 99
 580:	20 f4       	brcc	.+8      	; 0x58a <DIO_voidWriteNibble+0x32>
 582:	81 36       	cpi	r24, 0x61	; 97
 584:	09 f0       	breq	.+2      	; 0x588 <DIO_voidWriteNibble+0x30>
 586:	55 c0       	rjmp	.+170    	; 0x632 <DIO_voidWriteNibble+0xda>
 588:	06 c0       	rjmp	.+12     	; 0x596 <DIO_voidWriteNibble+0x3e>
 58a:	83 36       	cpi	r24, 0x63	; 99
 58c:	91 f0       	breq	.+36     	; 0x5b2 <DIO_voidWriteNibble+0x5a>
 58e:	84 36       	cpi	r24, 0x64	; 100
 590:	09 f0       	breq	.+2      	; 0x594 <DIO_voidWriteNibble+0x3c>
 592:	4f c0       	rjmp	.+158    	; 0x632 <DIO_voidWriteNibble+0xda>
 594:	15 c0       	rjmp	.+42     	; 0x5c0 <DIO_voidWriteNibble+0x68>
			case'A':
			case'a':

				PORTA&=0x0f;
 596:	8b b3       	in	r24, 0x1b	; 27
 598:	8f 70       	andi	r24, 0x0F	; 15
 59a:	8b bb       	out	0x1b, r24	; 27
				PORTA|=value;
 59c:	8b b3       	in	r24, 0x1b	; 27
 59e:	68 2b       	or	r22, r24
 5a0:	6b bb       	out	0x1b, r22	; 27


			break;
 5a2:	08 95       	ret

			case'B':
			case'b':
				PORTB&=0x0f;
 5a4:	88 b3       	in	r24, 0x18	; 24
 5a6:	8f 70       	andi	r24, 0x0F	; 15
 5a8:	88 bb       	out	0x18, r24	; 24
				PORTB|=value;
 5aa:	88 b3       	in	r24, 0x18	; 24
 5ac:	68 2b       	or	r22, r24
 5ae:	68 bb       	out	0x18, r22	; 24

			break;
 5b0:	08 95       	ret

			case'C':
			case'c':
				PORTC&=0x0f;
 5b2:	85 b3       	in	r24, 0x15	; 21
 5b4:	8f 70       	andi	r24, 0x0F	; 15
 5b6:	85 bb       	out	0x15, r24	; 21
				PORTC|=value;
 5b8:	85 b3       	in	r24, 0x15	; 21
 5ba:	68 2b       	or	r22, r24
 5bc:	65 bb       	out	0x15, r22	; 21

			break;
 5be:	08 95       	ret

			case'D':
			case'd':
				PORTD&=0x0f;
 5c0:	82 b3       	in	r24, 0x12	; 18
 5c2:	8f 70       	andi	r24, 0x0F	; 15
 5c4:	82 bb       	out	0x12, r24	; 18
				PORTD|=value;
 5c6:	82 b3       	in	r24, 0x12	; 18
 5c8:	68 2b       	or	r22, r24
 5ca:	62 bb       	out	0x12, r22	; 18

			break;
 5cc:	08 95       	ret
			default:
				break;
	}}
	else{
		switch(PortName){
 5ce:	84 34       	cpi	r24, 0x44	; 68
 5d0:	51 f1       	breq	.+84     	; 0x626 <DIO_voidWriteNibble+0xce>
 5d2:	85 34       	cpi	r24, 0x45	; 69
 5d4:	38 f4       	brcc	.+14     	; 0x5e4 <DIO_voidWriteNibble+0x8c>
 5d6:	82 34       	cpi	r24, 0x42	; 66
 5d8:	c1 f0       	breq	.+48     	; 0x60a <DIO_voidWriteNibble+0xb2>
 5da:	83 34       	cpi	r24, 0x43	; 67
 5dc:	e8 f4       	brcc	.+58     	; 0x618 <DIO_voidWriteNibble+0xc0>
 5de:	81 34       	cpi	r24, 0x41	; 65
 5e0:	41 f5       	brne	.+80     	; 0x632 <DIO_voidWriteNibble+0xda>
 5e2:	0c c0       	rjmp	.+24     	; 0x5fc <DIO_voidWriteNibble+0xa4>
 5e4:	82 36       	cpi	r24, 0x62	; 98
 5e6:	89 f0       	breq	.+34     	; 0x60a <DIO_voidWriteNibble+0xb2>
 5e8:	83 36       	cpi	r24, 0x63	; 99
 5ea:	18 f4       	brcc	.+6      	; 0x5f2 <DIO_voidWriteNibble+0x9a>
 5ec:	81 36       	cpi	r24, 0x61	; 97
 5ee:	09 f5       	brne	.+66     	; 0x632 <DIO_voidWriteNibble+0xda>
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <DIO_voidWriteNibble+0xa4>
 5f2:	83 36       	cpi	r24, 0x63	; 99
 5f4:	89 f0       	breq	.+34     	; 0x618 <DIO_voidWriteNibble+0xc0>
 5f6:	84 36       	cpi	r24, 0x64	; 100
 5f8:	e1 f4       	brne	.+56     	; 0x632 <DIO_voidWriteNibble+0xda>
 5fa:	15 c0       	rjmp	.+42     	; 0x626 <DIO_voidWriteNibble+0xce>
			case'A':
			case'a':

					PORTA&=0xf0;
 5fc:	8b b3       	in	r24, 0x1b	; 27
 5fe:	80 7f       	andi	r24, 0xF0	; 240
 600:	8b bb       	out	0x1b, r24	; 27
					PORTA|=value;
 602:	8b b3       	in	r24, 0x1b	; 27
 604:	68 2b       	or	r22, r24
 606:	6b bb       	out	0x1b, r22	; 27


			break;
 608:	08 95       	ret

		    case'B':
			case'b':
					PORTB&=0xf0;
 60a:	88 b3       	in	r24, 0x18	; 24
 60c:	80 7f       	andi	r24, 0xF0	; 240
 60e:	88 bb       	out	0x18, r24	; 24
					PORTB|=value;
 610:	88 b3       	in	r24, 0x18	; 24
 612:	68 2b       	or	r22, r24
 614:	68 bb       	out	0x18, r22	; 24

			break;
 616:	08 95       	ret

			case'C':
			case'c':
					PORTC&=0xf0;
 618:	85 b3       	in	r24, 0x15	; 21
 61a:	80 7f       	andi	r24, 0xF0	; 240
 61c:	85 bb       	out	0x15, r24	; 21
					PORTC|=value;
 61e:	85 b3       	in	r24, 0x15	; 21
 620:	68 2b       	or	r22, r24
 622:	65 bb       	out	0x15, r22	; 21

			break;
 624:	08 95       	ret

			case'D':
			case'd':
					PORTD&=0xf0;
 626:	82 b3       	in	r24, 0x12	; 18
 628:	80 7f       	andi	r24, 0xF0	; 240
 62a:	82 bb       	out	0x12, r24	; 18
					PORTD|=value;
 62c:	82 b3       	in	r24, 0x12	; 18
 62e:	68 2b       	or	r22, r24
 630:	62 bb       	out	0x12, r22	; 18
 632:	08 95       	ret

00000634 <DIO_voidConnectPullUp>:
	 * DDRx N must be INPUT
	 * PORT xN =1
 * RETURN : No return
 */
void DIO_voidConnectPullUp(uint8 PortName , uint8 PinNumber , uint8 connect){
	DIO_voidWritePin(PortName,PinNumber,connect);
 634:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>


}
 638:	08 95       	ret

0000063a <main>:
#define button5PIN 7


int main(void)
{
	LCD_vInit();
 63a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_vInit>
	BUTTON_voidINIT(button1PORT,button1PIN);
 63e:	84 e4       	ldi	r24, 0x44	; 68
 640:	63 e0       	ldi	r22, 0x03	; 3
 642:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_voidINIT>
	BUTTON_voidINIT(button2PORT,button2PIN);
 646:	84 e4       	ldi	r24, 0x44	; 68
 648:	64 e0       	ldi	r22, 0x04	; 4
 64a:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_voidINIT>
	BUTTON_voidINIT(button3PORT,button3PIN);
 64e:	84 e4       	ldi	r24, 0x44	; 68
 650:	65 e0       	ldi	r22, 0x05	; 5
 652:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_voidINIT>
	BUTTON_voidINIT(button4PORT,button4PIN);
 656:	84 e4       	ldi	r24, 0x44	; 68
 658:	66 e0       	ldi	r22, 0x06	; 6
 65a:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_voidINIT>
	BUTTON_voidINIT(button5PORT,button5PIN);
 65e:	84 e4       	ldi	r24, 0x44	; 68
 660:	67 e0       	ldi	r22, 0x07	; 7
 662:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_voidINIT>
	LCD_vMoveCursor(1,4);
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	64 e0       	ldi	r22, 0x04	; 4
 66a:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
	LCD_vSendString("WELCOME TO");
 66e:	80 e6       	ldi	r24, 0x60	; 96
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
	LCD_vMoveCursor(2,7);
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	67 e0       	ldi	r22, 0x07	; 7
 67a:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
	LCD_vSendString(" EVM!");
 67e:	8b e6       	ldi	r24, 0x6B	; 107
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 686:	8f e3       	ldi	r24, 0x3F	; 63
 688:	9d e0       	ldi	r25, 0x0D	; 13
 68a:	a3 e0       	ldi	r26, 0x03	; 3
 68c:	81 50       	subi	r24, 0x01	; 1
 68e:	90 40       	sbci	r25, 0x00	; 0
 690:	a0 40       	sbci	r26, 0x00	; 0
 692:	e1 f7       	brne	.-8      	; 0x68c <main+0x52>
 694:	00 c0       	rjmp	.+0      	; 0x696 <main+0x5c>
 696:	00 00       	nop
	_delay_ms(1000);
	LCD_vCLR();
 698:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_vCLR>
	LCD_vMoveCursor(1,1);
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
	LCD_vSendString("A=0");
 6a4:	81 e7       	ldi	r24, 0x71	; 113
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
	LCD_vMoveCursor(1,12);
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	6c e0       	ldi	r22, 0x0C	; 12
 6b0:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
	LCD_vSendString("B=0");
 6b4:	85 e7       	ldi	r24, 0x75	; 117
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
	LCD_vMoveCursor(2,1);
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	61 e0       	ldi	r22, 0x01	; 1
 6c0:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
	LCD_vSendString("C=0");
 6c4:	89 e7       	ldi	r24, 0x79	; 121
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
	LCD_vMoveCursor(2,12);
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	6c e0       	ldi	r22, 0x0C	; 12
 6d0:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
	LCD_vSendString("D=0");
 6d4:	8d e7       	ldi	r24, 0x7D	; 125
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
	
	uint8 c1=0,c2=0,c3=0,c4=0;
 6dc:	00 e0       	ldi	r16, 0x00	; 0
 6de:	ff 24       	eor	r15, r15
 6e0:	ee 24       	eor	r14, r14
 6e2:	dd 24       	eor	r13, r13
			else if(c1<100){
				LCD_vSendData(c1/10+48);
				LCD_vSendData(c1%10+48);
			}
			 else if(c1<1000){
				 LCD_vSendData(c1/100+48);
 6e4:	0f 2e       	mov	r0, r31
 6e6:	f4 e6       	ldi	r31, 0x64	; 100
 6e8:	bf 2e       	mov	r11, r31
 6ea:	f0 2d       	mov	r31, r0
				 LCD_vSendData((c1%100)/10+48);
 6ec:	0f 2e       	mov	r0, r31
 6ee:	fa e0       	ldi	r31, 0x0A	; 10
 6f0:	cf 2e       	mov	r12, r31
 6f2:	f0 2d       	mov	r31, r0
			 c2=0;
			 c3=0;
			 c4=0;
			 LCD_vCLR();
			 LCD_vMoveCursor(1,1);
			 LCD_vSendString("A=0");
 6f4:	0f 2e       	mov	r0, r31
 6f6:	f1 e7       	ldi	r31, 0x71	; 113
 6f8:	8f 2e       	mov	r8, r31
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	9f 2e       	mov	r9, r31
 6fe:	f0 2d       	mov	r31, r0
			 LCD_vMoveCursor(1,12);
			 LCD_vSendString("B=0");
 700:	0f 2e       	mov	r0, r31
 702:	f5 e7       	ldi	r31, 0x75	; 117
 704:	6f 2e       	mov	r6, r31
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	7f 2e       	mov	r7, r31
 70a:	f0 2d       	mov	r31, r0
			 LCD_vMoveCursor(2,1);
			 LCD_vSendString("C=0");
 70c:	0f 2e       	mov	r0, r31
 70e:	f9 e7       	ldi	r31, 0x79	; 121
 710:	4f 2e       	mov	r4, r31
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	5f 2e       	mov	r5, r31
 716:	f0 2d       	mov	r31, r0
			 LCD_vMoveCursor(2,12);
			 LCD_vSendString("D=0");
 718:	0f 2e       	mov	r0, r31
 71a:	fd e7       	ldi	r31, 0x7D	; 125
 71c:	2f 2e       	mov	r2, r31
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	3f 2e       	mov	r3, r31
 722:	f0 2d       	mov	r31, r0
		 {
			 //reset
			 c1=0;
			 c2=0;
			 c3=0;
			 c4=0;
 724:	10 e0       	ldi	r17, 0x00	; 0
	
	uint8 c1=0,c2=0,c3=0,c4=0;
    while(1)
    {

		if(1==BUTTON_u8Read(button1PORT,button1PIN))
 726:	84 e4       	ldi	r24, 0x44	; 68
 728:	63 e0       	ldi	r22, 0x03	; 3
 72a:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_u8Read>
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	91 f5       	brne	.+100    	; 0x796 <main+0x15c>
		{
			c1++;
 732:	dd 2d       	mov	r29, r13
 734:	df 5f       	subi	r29, 0xFF	; 255
			LCD_vMoveCursor(1,3);
 736:	63 e0       	ldi	r22, 0x03	; 3
 738:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
			if(c1<10){
 73c:	da 30       	cpi	r29, 0x0A	; 10
 73e:	30 f4       	brcc	.+12     	; 0x74c <main+0x112>
				LCD_vSendData(c1+48);
 740:	8d 2d       	mov	r24, r13
 742:	8f 5c       	subi	r24, 0xCF	; 207
 744:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
    while(1)
    {

		if(1==BUTTON_u8Read(button1PORT,button1PIN))
		{
			c1++;
 748:	dd 2e       	mov	r13, r29
 74a:	25 c0       	rjmp	.+74     	; 0x796 <main+0x15c>
			LCD_vMoveCursor(1,3);
			if(c1<10){
				LCD_vSendData(c1+48);
			}
			else if(c1<100){
 74c:	d4 36       	cpi	r29, 0x64	; 100
 74e:	70 f4       	brcc	.+28     	; 0x76c <main+0x132>
				LCD_vSendData(c1/10+48);
 750:	8d 2f       	mov	r24, r29
 752:	6c 2d       	mov	r22, r12
 754:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 758:	c9 2f       	mov	r28, r25
 75a:	80 5d       	subi	r24, 0xD0	; 208
 75c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				LCD_vSendData(c1%10+48);
 760:	8c 2f       	mov	r24, r28
 762:	80 5d       	subi	r24, 0xD0	; 208
 764:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
    while(1)
    {

		if(1==BUTTON_u8Read(button1PORT,button1PIN))
		{
			c1++;
 768:	dd 2e       	mov	r13, r29
 76a:	15 c0       	rjmp	.+42     	; 0x796 <main+0x15c>
			else if(c1<100){
				LCD_vSendData(c1/10+48);
				LCD_vSendData(c1%10+48);
			}
			 else if(c1<1000){
				 LCD_vSendData(c1/100+48);
 76c:	8d 2f       	mov	r24, r29
 76e:	6b 2d       	mov	r22, r11
 770:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 774:	c9 2f       	mov	r28, r25
 776:	80 5d       	subi	r24, 0xD0	; 208
 778:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				 LCD_vSendData((c1%100)/10+48);
 77c:	8c 2f       	mov	r24, r28
 77e:	6c 2d       	mov	r22, r12
 780:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 784:	c9 2f       	mov	r28, r25
 786:	80 5d       	subi	r24, 0xD0	; 208
 788:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				 LCD_vSendData((c1%100)%10+48);
 78c:	8c 2f       	mov	r24, r28
 78e:	80 5d       	subi	r24, 0xD0	; 208
 790:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
    while(1)
    {

		if(1==BUTTON_u8Read(button1PORT,button1PIN))
		{
			c1++;
 794:	dd 2e       	mov	r13, r29
				 LCD_vSendData((c1%100)%10+48);
			 }
			
        
         }
		 if(1==BUTTON_u8Read(button2PORT,button2PIN))
 796:	84 e4       	ldi	r24, 0x44	; 68
 798:	64 e0       	ldi	r22, 0x04	; 4
 79a:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_u8Read>
 79e:	81 30       	cpi	r24, 0x01	; 1
 7a0:	91 f5       	brne	.+100    	; 0x806 <main+0x1cc>
		 {
			  c2++;
 7a2:	de 2d       	mov	r29, r14
 7a4:	df 5f       	subi	r29, 0xFF	; 255
			 LCD_vMoveCursor(1,14);
 7a6:	6e e0       	ldi	r22, 0x0E	; 14
 7a8:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
			 if(c2<10){
 7ac:	da 30       	cpi	r29, 0x0A	; 10
 7ae:	30 f4       	brcc	.+12     	; 0x7bc <main+0x182>
				 LCD_vSendData(c2+48);
 7b0:	8e 2d       	mov	r24, r14
 7b2:	8f 5c       	subi	r24, 0xCF	; 207
 7b4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			
        
         }
		 if(1==BUTTON_u8Read(button2PORT,button2PIN))
		 {
			  c2++;
 7b8:	ed 2e       	mov	r14, r29
 7ba:	25 c0       	rjmp	.+74     	; 0x806 <main+0x1cc>
			 LCD_vMoveCursor(1,14);
			 if(c2<10){
				 LCD_vSendData(c2+48);
			 }
			 else if(c2<100){
 7bc:	d4 36       	cpi	r29, 0x64	; 100
 7be:	70 f4       	brcc	.+28     	; 0x7dc <main+0x1a2>
				 LCD_vSendData(c2/10+48);
 7c0:	8d 2f       	mov	r24, r29
 7c2:	6c 2d       	mov	r22, r12
 7c4:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 7c8:	c9 2f       	mov	r28, r25
 7ca:	80 5d       	subi	r24, 0xD0	; 208
 7cc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				 LCD_vSendData(c2%10+48);
 7d0:	8c 2f       	mov	r24, r28
 7d2:	80 5d       	subi	r24, 0xD0	; 208
 7d4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			
        
         }
		 if(1==BUTTON_u8Read(button2PORT,button2PIN))
		 {
			  c2++;
 7d8:	ed 2e       	mov	r14, r29
 7da:	15 c0       	rjmp	.+42     	; 0x806 <main+0x1cc>
			 else if(c2<100){
				 LCD_vSendData(c2/10+48);
				 LCD_vSendData(c2%10+48);
			 }
			 else if(c2<1000){
				 LCD_vSendData(c2/100+48);
 7dc:	8d 2f       	mov	r24, r29
 7de:	6b 2d       	mov	r22, r11
 7e0:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 7e4:	c9 2f       	mov	r28, r25
 7e6:	80 5d       	subi	r24, 0xD0	; 208
 7e8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				 LCD_vSendData((c2%100)/10+48);
 7ec:	8c 2f       	mov	r24, r28
 7ee:	6c 2d       	mov	r22, r12
 7f0:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 7f4:	c9 2f       	mov	r28, r25
 7f6:	80 5d       	subi	r24, 0xD0	; 208
 7f8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				 LCD_vSendData((c2%100)%10+48);
 7fc:	8c 2f       	mov	r24, r28
 7fe:	80 5d       	subi	r24, 0xD0	; 208
 800:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			
        
         }
		 if(1==BUTTON_u8Read(button2PORT,button2PIN))
		 {
			  c2++;
 804:	ed 2e       	mov	r14, r29
			 }
			 
			
			 
		 }
		 if(1==BUTTON_u8Read(button3PORT,button3PIN))
 806:	84 e4       	ldi	r24, 0x44	; 68
 808:	65 e0       	ldi	r22, 0x05	; 5
 80a:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_u8Read>
 80e:	81 30       	cpi	r24, 0x01	; 1
 810:	99 f5       	brne	.+102    	; 0x878 <__stack+0x19>
		 {
			 c3++;
 812:	df 2d       	mov	r29, r15
 814:	df 5f       	subi	r29, 0xFF	; 255
			 LCD_vMoveCursor(2,3);
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	63 e0       	ldi	r22, 0x03	; 3
 81a:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
			 if(c3<10){
 81e:	da 30       	cpi	r29, 0x0A	; 10
 820:	30 f4       	brcc	.+12     	; 0x82e <main+0x1f4>
			 LCD_vSendData(c3+48);
 822:	8f 2d       	mov	r24, r15
 824:	8f 5c       	subi	r24, 0xCF	; 207
 826:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			
			 
		 }
		 if(1==BUTTON_u8Read(button3PORT,button3PIN))
		 {
			 c3++;
 82a:	fd 2e       	mov	r15, r29
 82c:	25 c0       	rjmp	.+74     	; 0x878 <__stack+0x19>
			 LCD_vMoveCursor(2,3);
			 if(c3<10){
			 LCD_vSendData(c3+48);
			 }
			 else if(c3<100){
 82e:	d4 36       	cpi	r29, 0x64	; 100
 830:	70 f4       	brcc	.+28     	; 0x84e <main+0x214>
				 LCD_vSendData(c3/10+48);
 832:	8d 2f       	mov	r24, r29
 834:	6c 2d       	mov	r22, r12
 836:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 83a:	c9 2f       	mov	r28, r25
 83c:	80 5d       	subi	r24, 0xD0	; 208
 83e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				 LCD_vSendData(c3%10+48);
 842:	8c 2f       	mov	r24, r28
 844:	80 5d       	subi	r24, 0xD0	; 208
 846:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			
			 
		 }
		 if(1==BUTTON_u8Read(button3PORT,button3PIN))
		 {
			 c3++;
 84a:	fd 2e       	mov	r15, r29
 84c:	15 c0       	rjmp	.+42     	; 0x878 <__stack+0x19>
			 else if(c3<100){
				 LCD_vSendData(c3/10+48);
				 LCD_vSendData(c3%10+48);
			 }			 
			  else if(c3<1000){
				  LCD_vSendData(c3/100+48);
 84e:	8d 2f       	mov	r24, r29
 850:	6b 2d       	mov	r22, r11
 852:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 856:	c9 2f       	mov	r28, r25
 858:	80 5d       	subi	r24, 0xD0	; 208
 85a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				  LCD_vSendData((c3%100)/10+48);
 85e:	8c 2f       	mov	r24, r28
 860:	6c 2d       	mov	r22, r12
 862:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 866:	c9 2f       	mov	r28, r25
 868:	80 5d       	subi	r24, 0xD0	; 208
 86a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				  LCD_vSendData((c3%100)%10+48);
 86e:	8c 2f       	mov	r24, r28
 870:	80 5d       	subi	r24, 0xD0	; 208
 872:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			
			 
		 }
		 if(1==BUTTON_u8Read(button3PORT,button3PIN))
		 {
			 c3++;
 876:	fd 2e       	mov	r15, r29
				  LCD_vSendData((c3%100)/10+48);
				  LCD_vSendData((c3%100)%10+48);
			  }
			 
		 }
		 if(1==BUTTON_u8Read(button4PORT,button4PIN))
 878:	84 e4       	ldi	r24, 0x44	; 68
 87a:	66 e0       	ldi	r22, 0x06	; 6
 87c:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_u8Read>
 880:	81 30       	cpi	r24, 0x01	; 1
 882:	99 f5       	brne	.+102    	; 0x8ea <__stack+0x8b>
		 {
			 c4++;
 884:	d0 2f       	mov	r29, r16
 886:	df 5f       	subi	r29, 0xFF	; 255
			 LCD_vMoveCursor(2,14);
 888:	82 e0       	ldi	r24, 0x02	; 2
 88a:	6e e0       	ldi	r22, 0x0E	; 14
 88c:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
			if(c4<10){
 890:	da 30       	cpi	r29, 0x0A	; 10
 892:	30 f4       	brcc	.+12     	; 0x8a0 <__stack+0x41>
				LCD_vSendData(c4+48);
 894:	80 2f       	mov	r24, r16
 896:	8f 5c       	subi	r24, 0xCF	; 207
 898:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			  }
			 
		 }
		 if(1==BUTTON_u8Read(button4PORT,button4PIN))
		 {
			 c4++;
 89c:	0d 2f       	mov	r16, r29
 89e:	25 c0       	rjmp	.+74     	; 0x8ea <__stack+0x8b>
			 LCD_vMoveCursor(2,14);
			if(c4<10){
				LCD_vSendData(c4+48);
			}
			else if(c4<100){
 8a0:	d4 36       	cpi	r29, 0x64	; 100
 8a2:	70 f4       	brcc	.+28     	; 0x8c0 <__stack+0x61>
				LCD_vSendData(c4/10+48);
 8a4:	8d 2f       	mov	r24, r29
 8a6:	6c 2d       	mov	r22, r12
 8a8:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 8ac:	c9 2f       	mov	r28, r25
 8ae:	80 5d       	subi	r24, 0xD0	; 208
 8b0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				LCD_vSendData(c4%10+48);
 8b4:	8c 2f       	mov	r24, r28
 8b6:	80 5d       	subi	r24, 0xD0	; 208
 8b8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			  }
			 
		 }
		 if(1==BUTTON_u8Read(button4PORT,button4PIN))
		 {
			 c4++;
 8bc:	0d 2f       	mov	r16, r29
 8be:	15 c0       	rjmp	.+42     	; 0x8ea <__stack+0x8b>
			else if(c4<100){
				LCD_vSendData(c4/10+48);
				LCD_vSendData(c4%10+48);
			}
			 else if(c4<1000){
				 LCD_vSendData(c4/100+48);
 8c0:	8d 2f       	mov	r24, r29
 8c2:	6b 2d       	mov	r22, r11
 8c4:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 8c8:	c9 2f       	mov	r28, r25
 8ca:	80 5d       	subi	r24, 0xD0	; 208
 8cc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				 LCD_vSendData((c4%100)/10+48);
 8d0:	8c 2f       	mov	r24, r28
 8d2:	6c 2d       	mov	r22, r12
 8d4:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodqi4>
 8d8:	c9 2f       	mov	r28, r25
 8da:	80 5d       	subi	r24, 0xD0	; 208
 8dc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
				 LCD_vSendData((c4%100)%10+48);
 8e0:	8c 2f       	mov	r24, r28
 8e2:	80 5d       	subi	r24, 0xD0	; 208
 8e4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
			  }
			 
		 }
		 if(1==BUTTON_u8Read(button4PORT,button4PIN))
		 {
			 c4++;
 8e8:	0d 2f       	mov	r16, r29
				 LCD_vSendData((c4%100)%10+48);
			 }
			
			 
		 }
		 if (1==BUTTON_u8Read(button5PORT,button5PIN))
 8ea:	84 e4       	ldi	r24, 0x44	; 68
 8ec:	67 e0       	ldi	r22, 0x07	; 7
 8ee:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_u8Read>
 8f2:	81 30       	cpi	r24, 0x01	; 1
 8f4:	11 f5       	brne	.+68     	; 0x93a <__stack+0xdb>
			 //reset
			 c1=0;
			 c2=0;
			 c3=0;
			 c4=0;
			 LCD_vCLR();
 8f6:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_vCLR>
			 LCD_vMoveCursor(1,1);
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	61 e0       	ldi	r22, 0x01	; 1
 8fe:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
			 LCD_vSendString("A=0");
 902:	c4 01       	movw	r24, r8
 904:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
			 LCD_vMoveCursor(1,12);
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	6c e0       	ldi	r22, 0x0C	; 12
 90c:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
			 LCD_vSendString("B=0");
 910:	c3 01       	movw	r24, r6
 912:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
			 LCD_vMoveCursor(2,1);
 916:	82 e0       	ldi	r24, 0x02	; 2
 918:	61 e0       	ldi	r22, 0x01	; 1
 91a:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
			 LCD_vSendString("C=0");
 91e:	c2 01       	movw	r24, r4
 920:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
			 LCD_vMoveCursor(2,12);
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	6c e0       	ldi	r22, 0x0C	; 12
 928:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_vMoveCursor>
			 LCD_vSendString("D=0");
 92c:	c1 01       	movw	r24, r2
 92e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LCD_vSendString>
		 {
			 //reset
			 c1=0;
			 c2=0;
			 c3=0;
			 c4=0;
 932:	01 2f       	mov	r16, r17
		 if (1==BUTTON_u8Read(button5PORT,button5PIN))
		 {
			 //reset
			 c1=0;
			 c2=0;
			 c3=0;
 934:	f1 2e       	mov	r15, r17
		 }
		 if (1==BUTTON_u8Read(button5PORT,button5PIN))
		 {
			 //reset
			 c1=0;
			 c2=0;
 936:	e1 2e       	mov	r14, r17
			 
		 }
		 if (1==BUTTON_u8Read(button5PORT,button5PIN))
		 {
			 //reset
			 c1=0;
 938:	d1 2e       	mov	r13, r17
 93a:	af e4       	ldi	r26, 0x4F	; 79
 93c:	b3 ec       	ldi	r27, 0xC3	; 195
 93e:	11 97       	sbiw	r26, 0x01	; 1
 940:	f1 f7       	brne	.-4      	; 0x93e <__stack+0xdf>
 942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0xe5>
 944:	00 00       	nop
 946:	ef ce       	rjmp	.-546    	; 0x726 <main+0xec>

00000948 <Enable>:
#define SHIFT_DISPLAY2LEFT_COM 0X18
#define SHIFT_DISPLAY2RIGHT_COM 0X1C
#define CGROM_COM 0x40

static void Enable(void){
	DIO_voidWritePin(EPORT,EPIN,HIGH);
 948:	83 e4       	ldi	r24, 0x43	; 67
 94a:	63 e0       	ldi	r22, 0x03	; 3
 94c:	41 e0       	ldi	r20, 0x01	; 1
 94e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
 952:	83 ef       	ldi	r24, 0xF3	; 243
 954:	91 e0       	ldi	r25, 0x01	; 1
 956:	01 97       	sbiw	r24, 0x01	; 1
 958:	f1 f7       	brne	.-4      	; 0x956 <Enable+0xe>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <Enable+0x14>
 95c:	00 00       	nop
	_delay_ms(2);
	DIO_voidWritePin(EPORT,EPIN,LOW);
 95e:	83 e4       	ldi	r24, 0x43	; 67
 960:	63 e0       	ldi	r22, 0x03	; 3
 962:	40 e0       	ldi	r20, 0x00	; 0
 964:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
 968:	83 ef       	ldi	r24, 0xF3	; 243
 96a:	91 e0       	ldi	r25, 0x01	; 1
 96c:	01 97       	sbiw	r24, 0x01	; 1
 96e:	f1 f7       	brne	.-4      	; 0x96c <Enable+0x24>
 970:	00 c0       	rjmp	.+0      	; 0x972 <Enable+0x2a>
 972:	00 00       	nop
	_delay_ms(2);
}
 974:	08 95       	ret

00000976 <LCD_vSendCmd>:
	LCD_vSendCmd(DISPLAYON_CURSOROFF_COM);
	LCD_vSendCmd(MOVE_2RIGHT_COM);
	
	
}
void LCD_vSendCmd(uint8 command){
 976:	cf 93       	push	r28
 978:	c8 2f       	mov	r28, r24
	DIO_voidWritePin(RWPORT,RWPIN,LOW);
 97a:	83 e4       	ldi	r24, 0x43	; 67
 97c:	62 e0       	ldi	r22, 0x02	; 2
 97e:	40 e0       	ldi	r20, 0x00	; 0
 980:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	#ifdef EIGHT_BIT_MODE
	DIO_voidWritePort(PORT_8MODE,command);
 984:	81 e4       	ldi	r24, 0x41	; 65
 986:	6c 2f       	mov	r22, r28
 988:	0e 94 46 02 	call	0x48c	; 0x48c <DIO_voidWritePort>
	DIO_voidWritePin(RSPORT,RSPIN,LOW);
 98c:	83 e4       	ldi	r24, 0x43	; 67
 98e:	61 e0       	ldi	r22, 0x01	; 1
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	Enable();
 996:	0e 94 a4 04 	call	0x948	; 0x948 <Enable>
 99a:	89 ef       	ldi	r24, 0xF9	; 249
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	01 97       	sbiw	r24, 0x01	; 1
 9a0:	f1 f7       	brne	.-4      	; 0x99e <LCD_vSendCmd+0x28>
 9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <LCD_vSendCmd+0x2e>
 9a4:	00 00       	nop
	Enable();
	DIO_voidWriteNibble(PORT_4MODE,command,LAST4);
	Enable();
	#endif
	
}
 9a6:	cf 91       	pop	r28
 9a8:	08 95       	ret

000009aa <LCD_vInit>:
	DIO_voidWritePin(EPORT,EPIN,HIGH);
	_delay_ms(2);
	DIO_voidWritePin(EPORT,EPIN,LOW);
	_delay_ms(2);
}
void LCD_vInit(void){
 9aa:	cf 93       	push	r28
 9ac:	df 93       	push	r29
	DIO_voidSetPortDir(PORT_8MODE,0XFF);
 9ae:	81 e4       	ldi	r24, 0x41	; 65
 9b0:	6f ef       	ldi	r22, 0xFF	; 255
 9b2:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_voidSetPortDir>
	DIO_voidSetPinDir(RSPORT,RSPIN,OUTPUT_PIN);
 9b6:	83 e4       	ldi	r24, 0x43	; 67
 9b8:	61 e0       	ldi	r22, 0x01	; 1
 9ba:	41 e0       	ldi	r20, 0x01	; 1
 9bc:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(RWPORT,RWPIN,OUTPUT_PIN);
 9c0:	83 e4       	ldi	r24, 0x43	; 67
 9c2:	62 e0       	ldi	r22, 0x02	; 2
 9c4:	41 e0       	ldi	r20, 0x01	; 1
 9c6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(EPORT,EPIN,OUTPUT_PIN);
 9ca:	83 e4       	ldi	r24, 0x43	; 67
 9cc:	63 e0       	ldi	r22, 0x03	; 3
 9ce:	41 e0       	ldi	r20, 0x01	; 1
 9d0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_voidSetPinDir>
	
	#ifdef EIGHT_BIT_MODE
	LCD_vSendCmd(EIGHT_BIT_COM);
 9d4:	cb eb       	ldi	r28, 0xBB	; 187
 9d6:	d4 e0       	ldi	r29, 0x04	; 4
 9d8:	88 e3       	ldi	r24, 0x38	; 56
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	fe 01       	movw	r30, r28
 9de:	09 95       	icall
	#else
	LCD_vSendCmd(RETURN_HOME);
	LCD_vSendCmd(FOUR_BIT_COM);
	#endif
	
	LCD_vSendCmd(CLRCOM);
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	fe 01       	movw	r30, r28
 9e6:	09 95       	icall
	LCD_vSendCmd(DISPLAYON_CURSOROFF_COM);
 9e8:	8c e0       	ldi	r24, 0x0C	; 12
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	fe 01       	movw	r30, r28
 9ee:	09 95       	icall
	LCD_vSendCmd(MOVE_2RIGHT_COM);
 9f0:	86 e0       	ldi	r24, 0x06	; 6
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	fe 01       	movw	r30, r28
 9f6:	09 95       	icall
	
	
}
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	08 95       	ret

000009fe <LCD_vSendData>:
	DIO_voidWriteNibble(PORT_4MODE,command,LAST4);
	Enable();
	#endif
	
}
void LCD_vSendData(uint8 data){
 9fe:	cf 93       	push	r28
 a00:	c8 2f       	mov	r28, r24
	DIO_voidWritePin(RWPORT,RWPIN,LOW);
 a02:	83 e4       	ldi	r24, 0x43	; 67
 a04:	62 e0       	ldi	r22, 0x02	; 2
 a06:	40 e0       	ldi	r20, 0x00	; 0
 a08:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	#ifdef EIGHT_BIT_MODE
	DIO_voidWritePort(PORT_8MODE,data);
 a0c:	81 e4       	ldi	r24, 0x41	; 65
 a0e:	6c 2f       	mov	r22, r28
 a10:	0e 94 46 02 	call	0x48c	; 0x48c <DIO_voidWritePort>
	DIO_voidWritePin(RSPORT,RSPIN,HIGH);
 a14:	83 e4       	ldi	r24, 0x43	; 67
 a16:	61 e0       	ldi	r22, 0x01	; 1
 a18:	41 e0       	ldi	r20, 0x01	; 1
 a1a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	Enable();
 a1e:	0e 94 a4 04 	call	0x948	; 0x948 <Enable>
	DIO_voidWritePin(RSPORT,RSPIN,HIGH);
	Enable();
	DIO_voidWriteNibble(PORT_4MODE,data,LAST4);
	Enable();
	#endif
}
 a22:	cf 91       	pop	r28
 a24:	08 95       	ret

00000a26 <LCD_vCLR>:
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	0e 94 bb 04 	call	0x976	; 0x976 <LCD_vSendCmd>
 a2c:	83 ec       	ldi	r24, 0xC3	; 195
 a2e:	99 e0       	ldi	r25, 0x09	; 9
 a30:	01 97       	sbiw	r24, 0x01	; 1
 a32:	f1 f7       	brne	.-4      	; 0xa30 <LCD_vCLR+0xa>
 a34:	00 c0       	rjmp	.+0      	; 0xa36 <LCD_vCLR+0x10>
 a36:	00 00       	nop
	_delay_ms(10);
}
 a38:	08 95       	ret

00000a3a <LCD_vSendString>:
void LCD_vSendString(uint8* ptr){
 a3a:	cf 93       	push	r28
 a3c:	df 93       	push	r29
 a3e:	ec 01       	movw	r28, r24
	while(*ptr!=0){
 a40:	88 81       	ld	r24, Y
 a42:	88 23       	and	r24, r24
 a44:	31 f0       	breq	.+12     	; 0xa52 <LCD_vSendString+0x18>
}
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
	_delay_ms(10);
}
void LCD_vSendString(uint8* ptr){
 a46:	21 96       	adiw	r28, 0x01	; 1
	while(*ptr!=0){
		LCD_vSendData(*ptr);
 a48:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_vSendData>
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
	_delay_ms(10);
}
void LCD_vSendString(uint8* ptr){
	while(*ptr!=0){
 a4c:	89 91       	ld	r24, Y+
 a4e:	88 23       	and	r24, r24
 a50:	d9 f7       	brne	.-10     	; 0xa48 <LCD_vSendString+0xe>
		LCD_vSendData(*ptr);
		ptr++;
	}
}
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	08 95       	ret

00000a58 <LCD_vMoveCursor>:
void LCD_vMoveCursor(uint8 row ,uint8 column){
	uint8 data;
	if((row>2)||(row<1)||(column<1)||(column>16)){
 a58:	28 2f       	mov	r18, r24
 a5a:	21 50       	subi	r18, 0x01	; 1
 a5c:	22 30       	cpi	r18, 0x02	; 2
 a5e:	70 f4       	brcc	.+28     	; 0xa7c <LCD_vMoveCursor+0x24>
 a60:	66 23       	and	r22, r22
 a62:	71 f0       	breq	.+28     	; 0xa80 <LCD_vMoveCursor+0x28>
 a64:	61 31       	cpi	r22, 0x11	; 17
 a66:	70 f4       	brcc	.+28     	; 0xa84 <LCD_vMoveCursor+0x2c>
		data=FIRST_ROW_COM;
	}
	else if(row==1){
 a68:	81 30       	cpi	r24, 0x01	; 1
 a6a:	19 f4       	brne	.+6      	; 0xa72 <LCD_vMoveCursor+0x1a>
		data=FIRST_ROW_COM+column-1;
 a6c:	96 2f       	mov	r25, r22
 a6e:	91 58       	subi	r25, 0x81	; 129
 a70:	0a c0       	rjmp	.+20     	; 0xa86 <LCD_vMoveCursor+0x2e>
	}
	else if(row==2){
 a72:	82 30       	cpi	r24, 0x02	; 2
 a74:	41 f4       	brne	.+16     	; 0xa86 <LCD_vMoveCursor+0x2e>
		data=SECOND_ROW_COM+column-1;
 a76:	96 2f       	mov	r25, r22
 a78:	91 54       	subi	r25, 0x41	; 65
 a7a:	05 c0       	rjmp	.+10     	; 0xa86 <LCD_vMoveCursor+0x2e>
	}
}
void LCD_vMoveCursor(uint8 row ,uint8 column){
	uint8 data;
	if((row>2)||(row<1)||(column<1)||(column>16)){
		data=FIRST_ROW_COM;
 a7c:	90 e8       	ldi	r25, 0x80	; 128
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <LCD_vMoveCursor+0x2e>
 a80:	90 e8       	ldi	r25, 0x80	; 128
 a82:	01 c0       	rjmp	.+2      	; 0xa86 <LCD_vMoveCursor+0x2e>
 a84:	90 e8       	ldi	r25, 0x80	; 128
		data=SECOND_ROW_COM+column-1;
	}
	else{
		
	}
	LCD_vSendCmd(data);
 a86:	89 2f       	mov	r24, r25
 a88:	0e 94 bb 04 	call	0x976	; 0x976 <LCD_vSendCmd>
}
 a8c:	08 95       	ret

00000a8e <__udivmodqi4>:
 a8e:	99 1b       	sub	r25, r25
 a90:	79 e0       	ldi	r23, 0x09	; 9
 a92:	04 c0       	rjmp	.+8      	; 0xa9c <__udivmodqi4_ep>

00000a94 <__udivmodqi4_loop>:
 a94:	99 1f       	adc	r25, r25
 a96:	96 17       	cp	r25, r22
 a98:	08 f0       	brcs	.+2      	; 0xa9c <__udivmodqi4_ep>
 a9a:	96 1b       	sub	r25, r22

00000a9c <__udivmodqi4_ep>:
 a9c:	88 1f       	adc	r24, r24
 a9e:	7a 95       	dec	r23
 aa0:	c9 f7       	brne	.-14     	; 0xa94 <__udivmodqi4_loop>
 aa2:	80 95       	com	r24
 aa4:	08 95       	ret

00000aa6 <_exit>:
 aa6:	f8 94       	cli

00000aa8 <__stop_program>:
 aa8:	ff cf       	rjmp	.-2      	; 0xaa8 <__stop_program>
