
SAFE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00000b7a  00000c0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000ce  008000ce  00000c7c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  000013d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e94  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ed  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008eb  00000000  00000000  00002971  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  0000325c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094c  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3c       	cpi	r26, 0xCE	; 206
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae ec       	ldi	r26, 0xCE	; 206
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3d       	cpi	r26, 0xD3	; 211
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <main>
  8a:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_voidINIT>:
#include"STD_MACROS.h"
#include"DIO.h"
#include"BUTTON.h"

void BUTTON_voidINIT(uint8 port , uint8 pin){
	DIO_voidSetPinDir(port,pin,INPUT_PIN);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_voidSetPinDir>
}
  98:	08 95       	ret

0000009a <BUTTON_u8Read>:
uint8 BUTTON_u8Read(uint8 port ,uint8 pin){
	return DIO_u8ReadPin(port,pin);
  9a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_u8ReadPin>
}
  9e:	08 95       	ret

000000a0 <DIO_voidSetPinDir>:
 * RETURN : No return
 */


void DIO_voidSetPinDir(uint8 PortName , uint8 PinNumber , DIOPinDIR value){
	switch(PortName){
  a0:	84 34       	cpi	r24, 0x44	; 68
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_voidSetPinDir+0x6>
  a4:	71 c0       	rjmp	.+226    	; 0x188 <DIO_voidSetPinDir+0xe8>
  a6:	85 34       	cpi	r24, 0x45	; 69
  a8:	48 f4       	brcc	.+18     	; 0xbc <DIO_voidSetPinDir+0x1c>
  aa:	82 34       	cpi	r24, 0x42	; 66
  ac:	99 f1       	breq	.+102    	; 0x114 <DIO_voidSetPinDir+0x74>
  ae:	83 34       	cpi	r24, 0x43	; 67
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_voidSetPinDir+0x14>
  b2:	4d c0       	rjmp	.+154    	; 0x14e <DIO_voidSetPinDir+0xae>
  b4:	81 34       	cpi	r24, 0x41	; 65
  b6:	09 f0       	breq	.+2      	; 0xba <DIO_voidSetPinDir+0x1a>
  b8:	83 c0       	rjmp	.+262    	; 0x1c0 <DIO_voidSetPinDir+0x120>
  ba:	0f c0       	rjmp	.+30     	; 0xda <DIO_voidSetPinDir+0x3a>
  bc:	82 36       	cpi	r24, 0x62	; 98
  be:	51 f1       	breq	.+84     	; 0x114 <DIO_voidSetPinDir+0x74>
  c0:	83 36       	cpi	r24, 0x63	; 99
  c2:	20 f4       	brcc	.+8      	; 0xcc <DIO_voidSetPinDir+0x2c>
  c4:	81 36       	cpi	r24, 0x61	; 97
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_voidSetPinDir+0x2a>
  c8:	7b c0       	rjmp	.+246    	; 0x1c0 <DIO_voidSetPinDir+0x120>
  ca:	07 c0       	rjmp	.+14     	; 0xda <DIO_voidSetPinDir+0x3a>
  cc:	83 36       	cpi	r24, 0x63	; 99
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_voidSetPinDir+0x32>
  d0:	3e c0       	rjmp	.+124    	; 0x14e <DIO_voidSetPinDir+0xae>
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	09 f0       	breq	.+2      	; 0xd8 <DIO_voidSetPinDir+0x38>
  d6:	74 c0       	rjmp	.+232    	; 0x1c0 <DIO_voidSetPinDir+0x120>
  d8:	57 c0       	rjmp	.+174    	; 0x188 <DIO_voidSetPinDir+0xe8>
		case'A':
		case'a':
			if(value == OUTPUT_PIN){
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	69 f4       	brne	.+26     	; 0xf8 <DIO_voidSetPinDir+0x58>

				SET_BIT( DDRA , PinNumber);
  de:	2a b3       	in	r18, 0x1a	; 26
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	ac 01       	movw	r20, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_voidSetPinDir+0x4c>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_voidSetPinDir+0x48>
  f0:	ba 01       	movw	r22, r20
  f2:	62 2b       	or	r22, r18
  f4:	6a bb       	out	0x1a, r22	; 26
  f6:	08 95       	ret

			}
			else{

				CLR_BIT( DDRA , PinNumber);
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	ac 01       	movw	r20, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinDir+0x66>
 102:	44 0f       	add	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinDir+0x62>
 10a:	ba 01       	movw	r22, r20
 10c:	60 95       	com	r22
 10e:	62 23       	and	r22, r18
 110:	6a bb       	out	0x1a, r22	; 26
 112:	08 95       	ret

			}
		break;
		case'B':
		case'b':
			if(value == OUTPUT_PIN){
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <DIO_voidSetPinDir+0x92>

				SET_BIT( DDRB , PinNumber);
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_voidSetPinDir+0x86>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_voidSetPinDir+0x82>
 12a:	ba 01       	movw	r22, r20
 12c:	62 2b       	or	r22, r18
 12e:	67 bb       	out	0x17, r22	; 23
 130:	08 95       	ret

			}
			else{

				CLR_BIT( DDRB , PinNumber);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDir+0xa0>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDir+0x9c>
 144:	ba 01       	movw	r22, r20
 146:	60 95       	com	r22
 148:	62 23       	and	r22, r18
 14a:	67 bb       	out	0x17, r22	; 23
 14c:	08 95       	ret

			}
		break;
		case'C':
		case'c':
			if(value == OUTPUT_PIN){
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	69 f4       	brne	.+26     	; 0x16c <DIO_voidSetPinDir+0xcc>

				SET_BIT( DDRC , PinNumber);
 152:	24 b3       	in	r18, 0x14	; 20
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinDir+0xc0>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinDir+0xbc>
 164:	ba 01       	movw	r22, r20
 166:	62 2b       	or	r22, r18
 168:	64 bb       	out	0x14, r22	; 20
 16a:	08 95       	ret

			}
			else{

				CLR_BIT( DDRC , PinNumber);
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ac 01       	movw	r20, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_voidSetPinDir+0xda>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_voidSetPinDir+0xd6>
 17e:	ba 01       	movw	r22, r20
 180:	60 95       	com	r22
 182:	62 23       	and	r22, r18
 184:	64 bb       	out	0x14, r22	; 20
 186:	08 95       	ret

			}
		break;
		case'D':
		case'd':
			if(value == OUTPUT_PIN){
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	69 f4       	brne	.+26     	; 0x1a6 <DIO_voidSetPinDir+0x106>

				SET_BIT( DDRD , PinNumber);
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinDir+0xfa>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinDir+0xf6>
 19e:	ba 01       	movw	r22, r20
 1a0:	62 2b       	or	r22, r18
 1a2:	61 bb       	out	0x11, r22	; 17
 1a4:	08 95       	ret

			}
			else{

				CLR_BIT( DDRD , PinNumber);
 1a6:	21 b3       	in	r18, 0x11	; 17
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_voidSetPinDir+0x114>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_voidSetPinDir+0x110>
 1b8:	ba 01       	movw	r22, r20
 1ba:	60 95       	com	r22
 1bc:	62 23       	and	r22, r18
 1be:	61 bb       	out	0x11, r22	; 17
 1c0:	08 95       	ret

000001c2 <DIO_voidWritePin>:
 * DESCRIPTION : Used to write on specific pin from a specific port as logic high or low
 * RETURN : No return
 */

void DIO_voidWritePin(uint8 PortName , uint8 PinNumber , uint8 value){
	switch(PortName){
 1c2:	84 34       	cpi	r24, 0x44	; 68
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <DIO_voidWritePin+0x6>
 1c6:	71 c0       	rjmp	.+226    	; 0x2aa <DIO_voidWritePin+0xe8>
 1c8:	85 34       	cpi	r24, 0x45	; 69
 1ca:	48 f4       	brcc	.+18     	; 0x1de <DIO_voidWritePin+0x1c>
 1cc:	82 34       	cpi	r24, 0x42	; 66
 1ce:	99 f1       	breq	.+102    	; 0x236 <DIO_voidWritePin+0x74>
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <DIO_voidWritePin+0x14>
 1d4:	4d c0       	rjmp	.+154    	; 0x270 <DIO_voidWritePin+0xae>
 1d6:	81 34       	cpi	r24, 0x41	; 65
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_voidWritePin+0x1a>
 1da:	83 c0       	rjmp	.+262    	; 0x2e2 <DIO_voidWritePin+0x120>
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <DIO_voidWritePin+0x3a>
 1de:	82 36       	cpi	r24, 0x62	; 98
 1e0:	51 f1       	breq	.+84     	; 0x236 <DIO_voidWritePin+0x74>
 1e2:	83 36       	cpi	r24, 0x63	; 99
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <DIO_voidWritePin+0x2c>
 1e6:	81 36       	cpi	r24, 0x61	; 97
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_voidWritePin+0x2a>
 1ea:	7b c0       	rjmp	.+246    	; 0x2e2 <DIO_voidWritePin+0x120>
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <DIO_voidWritePin+0x3a>
 1ee:	83 36       	cpi	r24, 0x63	; 99
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <DIO_voidWritePin+0x32>
 1f2:	3e c0       	rjmp	.+124    	; 0x270 <DIO_voidWritePin+0xae>
 1f4:	84 36       	cpi	r24, 0x64	; 100
 1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_voidWritePin+0x38>
 1f8:	74 c0       	rjmp	.+232    	; 0x2e2 <DIO_voidWritePin+0x120>
 1fa:	57 c0       	rjmp	.+174    	; 0x2aa <DIO_voidWritePin+0xe8>
		case'A':
		case'a':
			if(value == HIGH){
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	69 f4       	brne	.+26     	; 0x21a <DIO_voidWritePin+0x58>

				SET_BIT( PORTA , PinNumber);
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_voidWritePin+0x4c>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_voidWritePin+0x48>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	6b bb       	out	0x1b, r22	; 27
 218:	08 95       	ret

			}
			else{

				CLR_BIT( PORTA , PinNumber);
 21a:	2b b3       	in	r18, 0x1b	; 27
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_voidWritePin+0x66>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_voidWritePin+0x62>
 22c:	ba 01       	movw	r22, r20
 22e:	60 95       	com	r22
 230:	62 23       	and	r22, r18
 232:	6b bb       	out	0x1b, r22	; 27
 234:	08 95       	ret

			}
		break;
		case'B':
		case'b':
			if(value == HIGH){
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	69 f4       	brne	.+26     	; 0x254 <DIO_voidWritePin+0x92>

				SET_BIT( PORTB , PinNumber);
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidWritePin+0x86>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidWritePin+0x82>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	68 bb       	out	0x18, r22	; 24
 252:	08 95       	ret

			}
			else{

				CLR_BIT( PORTB , PinNumber);
 254:	28 b3       	in	r18, 0x18	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidWritePin+0xa0>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidWritePin+0x9c>
 266:	ba 01       	movw	r22, r20
 268:	60 95       	com	r22
 26a:	62 23       	and	r22, r18
 26c:	68 bb       	out	0x18, r22	; 24
 26e:	08 95       	ret

			}
		break;
		case'C':
		case'c':
			if(value == HIGH){
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	69 f4       	brne	.+26     	; 0x28e <DIO_voidWritePin+0xcc>

				SET_BIT( PORTC , PinNumber);
 274:	25 b3       	in	r18, 0x15	; 21
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_voidWritePin+0xc0>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_voidWritePin+0xbc>
 286:	ba 01       	movw	r22, r20
 288:	62 2b       	or	r22, r18
 28a:	65 bb       	out	0x15, r22	; 21
 28c:	08 95       	ret

			}
			else{

				CLR_BIT( PORTC , PinNumber);
 28e:	25 b3       	in	r18, 0x15	; 21
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_voidWritePin+0xda>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_voidWritePin+0xd6>
 2a0:	ba 01       	movw	r22, r20
 2a2:	60 95       	com	r22
 2a4:	62 23       	and	r22, r18
 2a6:	65 bb       	out	0x15, r22	; 21
 2a8:	08 95       	ret

			}
		break;
		case'D':
		case'd':
			if(value == HIGH){
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	69 f4       	brne	.+26     	; 0x2c8 <DIO_voidWritePin+0x106>

				SET_BIT( PORTD , PinNumber);
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ac 01       	movw	r20, r24
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_voidWritePin+0xfa>
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_voidWritePin+0xf6>
 2c0:	ba 01       	movw	r22, r20
 2c2:	62 2b       	or	r22, r18
 2c4:	62 bb       	out	0x12, r22	; 18
 2c6:	08 95       	ret

			}
			else{

				CLR_BIT( PORTD , PinNumber);
 2c8:	22 b3       	in	r18, 0x12	; 18
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_voidWritePin+0x114>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_voidWritePin+0x110>
 2da:	ba 01       	movw	r22, r20
 2dc:	60 95       	com	r22
 2de:	62 23       	and	r22, r18
 2e0:	62 bb       	out	0x12, r22	; 18
 2e2:	08 95       	ret

000002e4 <DIO_u8ReadPin>:
 */


uint8 DIO_u8ReadPin(uint8 PortName , uint8 PinNumber){
	uint8 value;
	switch(PortName){
 2e4:	84 34       	cpi	r24, 0x44	; 68
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_u8ReadPin+0x6>
 2e8:	51 c0       	rjmp	.+162    	; 0x38c <DIO_u8ReadPin+0xa8>
 2ea:	85 34       	cpi	r24, 0x45	; 69
 2ec:	40 f4       	brcc	.+16     	; 0x2fe <DIO_u8ReadPin+0x1a>
 2ee:	82 34       	cpi	r24, 0x42	; 66
 2f0:	39 f1       	breq	.+78     	; 0x340 <DIO_u8ReadPin+0x5c>
 2f2:	83 34       	cpi	r24, 0x43	; 67
 2f4:	c0 f5       	brcc	.+112    	; 0x366 <DIO_u8ReadPin+0x82>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	09 f0       	breq	.+2      	; 0x2fc <DIO_u8ReadPin+0x18>
 2fa:	5a c0       	rjmp	.+180    	; 0x3b0 <DIO_u8ReadPin+0xcc>
 2fc:	0e c0       	rjmp	.+28     	; 0x31a <DIO_u8ReadPin+0x36>
 2fe:	82 36       	cpi	r24, 0x62	; 98
 300:	f9 f0       	breq	.+62     	; 0x340 <DIO_u8ReadPin+0x5c>
 302:	83 36       	cpi	r24, 0x63	; 99
 304:	20 f4       	brcc	.+8      	; 0x30e <DIO_u8ReadPin+0x2a>
 306:	81 36       	cpi	r24, 0x61	; 97
 308:	09 f0       	breq	.+2      	; 0x30c <DIO_u8ReadPin+0x28>
 30a:	52 c0       	rjmp	.+164    	; 0x3b0 <DIO_u8ReadPin+0xcc>
 30c:	06 c0       	rjmp	.+12     	; 0x31a <DIO_u8ReadPin+0x36>
 30e:	83 36       	cpi	r24, 0x63	; 99
 310:	51 f1       	breq	.+84     	; 0x366 <DIO_u8ReadPin+0x82>
 312:	84 36       	cpi	r24, 0x64	; 100
 314:	09 f0       	breq	.+2      	; 0x318 <DIO_u8ReadPin+0x34>
 316:	4c c0       	rjmp	.+152    	; 0x3b0 <DIO_u8ReadPin+0xcc>
 318:	39 c0       	rjmp	.+114    	; 0x38c <DIO_u8ReadPin+0xa8>
		case'A':
		case'a':
			value=READ_BIT(PINA , PinNumber);
 31a:	29 b3       	in	r18, 0x19	; 25
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	06 2e       	mov	r0, r22
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8ReadPin+0x44>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8ReadPin+0x40>
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	82 23       	and	r24, r18
 330:	93 23       	and	r25, r19
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_u8ReadPin+0x54>
 334:	95 95       	asr	r25
 336:	87 95       	ror	r24
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_u8ReadPin+0x50>
 33c:	98 2f       	mov	r25, r24
		break;
 33e:	38 c0       	rjmp	.+112    	; 0x3b0 <DIO_u8ReadPin+0xcc>
		case'B':
		case'b':
			value=READ_BIT(PINB , PinNumber);
 340:	26 b3       	in	r18, 0x16	; 22
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	06 2e       	mov	r0, r22
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8ReadPin+0x6a>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8ReadPin+0x66>
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	82 23       	and	r24, r18
 356:	93 23       	and	r25, r19
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_u8ReadPin+0x7a>
 35a:	95 95       	asr	r25
 35c:	87 95       	ror	r24
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_u8ReadPin+0x76>
 362:	98 2f       	mov	r25, r24

		break;
 364:	25 c0       	rjmp	.+74     	; 0x3b0 <DIO_u8ReadPin+0xcc>
		case'C':
		case'c':
			value=READ_BIT(PINC , PinNumber);
 366:	23 b3       	in	r18, 0x13	; 19
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	06 2e       	mov	r0, r22
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_u8ReadPin+0x90>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_u8ReadPin+0x8c>
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	82 23       	and	r24, r18
 37c:	93 23       	and	r25, r19
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_u8ReadPin+0xa0>
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_u8ReadPin+0x9c>
 388:	98 2f       	mov	r25, r24

		break;
 38a:	12 c0       	rjmp	.+36     	; 0x3b0 <DIO_u8ReadPin+0xcc>
		case'D':
		case'd':
			value=READ_BIT(PIND , PinNumber);
 38c:	20 b3       	in	r18, 0x10	; 16
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	06 2e       	mov	r0, r22
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8ReadPin+0xb6>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8ReadPin+0xb2>
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	82 23       	and	r24, r18
 3a2:	93 23       	and	r25, r19
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8ReadPin+0xc6>
 3a6:	95 95       	asr	r25
 3a8:	87 95       	ror	r24
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8ReadPin+0xc2>
 3ae:	98 2f       	mov	r25, r24
		default:
		break;

	}
	return value;
}
 3b0:	89 2f       	mov	r24, r25
 3b2:	08 95       	ret

000003b4 <DIO_voidTogglePin>:
 * ARGUMENTS : uint8 PortName , uint8 PinNumber
 * DESCRIPTION : Used to toggle specific pin from a specific port
 * RETURN : No return
 */
void DIO_voidTogglePin(uint8 PortName , uint8 PinNumber){
	switch(PortName){
 3b4:	84 34       	cpi	r24, 0x44	; 68
 3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_voidTogglePin+0x6>
 3b8:	3d c0       	rjmp	.+122    	; 0x434 <DIO_voidTogglePin+0x80>
 3ba:	85 34       	cpi	r24, 0x45	; 69
 3bc:	40 f4       	brcc	.+16     	; 0x3ce <DIO_voidTogglePin+0x1a>
 3be:	82 34       	cpi	r24, 0x42	; 66
 3c0:	f9 f0       	breq	.+62     	; 0x400 <DIO_voidTogglePin+0x4c>
 3c2:	83 34       	cpi	r24, 0x43	; 67
 3c4:	50 f5       	brcc	.+84     	; 0x41a <DIO_voidTogglePin+0x66>
 3c6:	81 34       	cpi	r24, 0x41	; 65
 3c8:	09 f0       	breq	.+2      	; 0x3cc <DIO_voidTogglePin+0x18>
 3ca:	40 c0       	rjmp	.+128    	; 0x44c <DIO_voidTogglePin+0x98>
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <DIO_voidTogglePin+0x32>
 3ce:	82 36       	cpi	r24, 0x62	; 98
 3d0:	b9 f0       	breq	.+46     	; 0x400 <DIO_voidTogglePin+0x4c>
 3d2:	83 36       	cpi	r24, 0x63	; 99
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_voidTogglePin+0x28>
 3d6:	81 36       	cpi	r24, 0x61	; 97
 3d8:	c9 f5       	brne	.+114    	; 0x44c <DIO_voidTogglePin+0x98>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_voidTogglePin+0x32>
 3dc:	83 36       	cpi	r24, 0x63	; 99
 3de:	e9 f0       	breq	.+58     	; 0x41a <DIO_voidTogglePin+0x66>
 3e0:	84 36       	cpi	r24, 0x64	; 100
 3e2:	a1 f5       	brne	.+104    	; 0x44c <DIO_voidTogglePin+0x98>
 3e4:	27 c0       	rjmp	.+78     	; 0x434 <DIO_voidTogglePin+0x80>
		case'A':
		case'a':
			TOG_BIT(PORTA , PinNumber);
 3e6:	2b b3       	in	r18, 0x1b	; 27
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	ac 01       	movw	r20, r24
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_voidTogglePin+0x40>
 3f0:	44 0f       	add	r20, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_voidTogglePin+0x3c>
 3f8:	ba 01       	movw	r22, r20
 3fa:	62 27       	eor	r22, r18
 3fc:	6b bb       	out	0x1b, r22	; 27
		break;
 3fe:	08 95       	ret
		case'B':
		case'b':
			TOG_BIT(PORTB , PinNumber);
 400:	28 b3       	in	r18, 0x18	; 24
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	ac 01       	movw	r20, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_voidTogglePin+0x5a>
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_voidTogglePin+0x56>
 412:	ba 01       	movw	r22, r20
 414:	62 27       	eor	r22, r18
 416:	68 bb       	out	0x18, r22	; 24

		break;
 418:	08 95       	ret
		case'C':
		case'c':
			TOG_BIT(PORTC , PinNumber);
 41a:	25 b3       	in	r18, 0x15	; 21
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	ac 01       	movw	r20, r24
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_voidTogglePin+0x74>
 424:	44 0f       	add	r20, r20
 426:	55 1f       	adc	r21, r21
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_voidTogglePin+0x70>
 42c:	ba 01       	movw	r22, r20
 42e:	62 27       	eor	r22, r18
 430:	65 bb       	out	0x15, r22	; 21

		break;
 432:	08 95       	ret
		case'D':
		case'd':
			TOG_BIT(PORTD , PinNumber);
 434:	22 b3       	in	r18, 0x12	; 18
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	ac 01       	movw	r20, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_voidTogglePin+0x8e>
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_voidTogglePin+0x8a>
 446:	ba 01       	movw	r22, r20
 448:	62 27       	eor	r22, r18
 44a:	62 bb       	out	0x12, r22	; 18
 44c:	08 95       	ret

0000044e <DIO_voidSetPortDir>:
 * DESCRIPTION : Used to set  specific port as input or output
 * RETURN : No return
 */

void DIO_voidSetPortDir(uint8 PortName , uint8 value){
	switch(PortName){
 44e:	84 34       	cpi	r24, 0x44	; 68
 450:	d9 f0       	breq	.+54     	; 0x488 <DIO_voidSetPortDir+0x3a>
 452:	85 34       	cpi	r24, 0x45	; 69
 454:	38 f4       	brcc	.+14     	; 0x464 <DIO_voidSetPortDir+0x16>
 456:	82 34       	cpi	r24, 0x42	; 66
 458:	99 f0       	breq	.+38     	; 0x480 <DIO_voidSetPortDir+0x32>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	98 f4       	brcc	.+38     	; 0x484 <DIO_voidSetPortDir+0x36>
 45e:	81 34       	cpi	r24, 0x41	; 65
 460:	a1 f4       	brne	.+40     	; 0x48a <DIO_voidSetPortDir+0x3c>
 462:	0c c0       	rjmp	.+24     	; 0x47c <DIO_voidSetPortDir+0x2e>
 464:	82 36       	cpi	r24, 0x62	; 98
 466:	61 f0       	breq	.+24     	; 0x480 <DIO_voidSetPortDir+0x32>
 468:	83 36       	cpi	r24, 0x63	; 99
 46a:	18 f4       	brcc	.+6      	; 0x472 <DIO_voidSetPortDir+0x24>
 46c:	81 36       	cpi	r24, 0x61	; 97
 46e:	69 f4       	brne	.+26     	; 0x48a <DIO_voidSetPortDir+0x3c>
 470:	05 c0       	rjmp	.+10     	; 0x47c <DIO_voidSetPortDir+0x2e>
 472:	83 36       	cpi	r24, 0x63	; 99
 474:	39 f0       	breq	.+14     	; 0x484 <DIO_voidSetPortDir+0x36>
 476:	84 36       	cpi	r24, 0x64	; 100
 478:	41 f4       	brne	.+16     	; 0x48a <DIO_voidSetPortDir+0x3c>
 47a:	06 c0       	rjmp	.+12     	; 0x488 <DIO_voidSetPortDir+0x3a>
		case'A':
		case'a':

			DDRA=value;
 47c:	6a bb       	out	0x1a, r22	; 26

		break;
 47e:	08 95       	ret

		case'B':
		case'b':

			DDRB=value;
 480:	67 bb       	out	0x17, r22	; 23

		break;
 482:	08 95       	ret

		case'C':
		case'c':

			DDRC=value;
 484:	64 bb       	out	0x14, r22	; 20

		break;
 486:	08 95       	ret

		case'D':
		case'd':

			DDRD=value;
 488:	61 bb       	out	0x11, r22	; 17
 48a:	08 95       	ret

0000048c <DIO_voidWritePort>:
 * DESCRIPTION : Used to write on  specific port as logic high or low
 * RETURN : No return
 */

void DIO_voidWritePort(uint8 PortName , uint8 value){
	switch(PortName){
 48c:	84 34       	cpi	r24, 0x44	; 68
 48e:	d9 f0       	breq	.+54     	; 0x4c6 <DIO_voidWritePort+0x3a>
 490:	85 34       	cpi	r24, 0x45	; 69
 492:	38 f4       	brcc	.+14     	; 0x4a2 <DIO_voidWritePort+0x16>
 494:	82 34       	cpi	r24, 0x42	; 66
 496:	99 f0       	breq	.+38     	; 0x4be <DIO_voidWritePort+0x32>
 498:	83 34       	cpi	r24, 0x43	; 67
 49a:	98 f4       	brcc	.+38     	; 0x4c2 <DIO_voidWritePort+0x36>
 49c:	81 34       	cpi	r24, 0x41	; 65
 49e:	a1 f4       	brne	.+40     	; 0x4c8 <DIO_voidWritePort+0x3c>
 4a0:	0c c0       	rjmp	.+24     	; 0x4ba <DIO_voidWritePort+0x2e>
 4a2:	82 36       	cpi	r24, 0x62	; 98
 4a4:	61 f0       	breq	.+24     	; 0x4be <DIO_voidWritePort+0x32>
 4a6:	83 36       	cpi	r24, 0x63	; 99
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <DIO_voidWritePort+0x24>
 4aa:	81 36       	cpi	r24, 0x61	; 97
 4ac:	69 f4       	brne	.+26     	; 0x4c8 <DIO_voidWritePort+0x3c>
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <DIO_voidWritePort+0x2e>
 4b0:	83 36       	cpi	r24, 0x63	; 99
 4b2:	39 f0       	breq	.+14     	; 0x4c2 <DIO_voidWritePort+0x36>
 4b4:	84 36       	cpi	r24, 0x64	; 100
 4b6:	41 f4       	brne	.+16     	; 0x4c8 <DIO_voidWritePort+0x3c>
 4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <DIO_voidWritePort+0x3a>
			case'A':
			case'a':

				PORTA=value;
 4ba:	6b bb       	out	0x1b, r22	; 27

			break;
 4bc:	08 95       	ret

			case'B':
			case'b':

				PORTB=value;
 4be:	68 bb       	out	0x18, r22	; 24

			break;
 4c0:	08 95       	ret

			case'C':
			case'c':

				PORTC=value;
 4c2:	65 bb       	out	0x15, r22	; 21

			break;
 4c4:	08 95       	ret

			case'D':
			case'd':

				PORTD=value;
 4c6:	62 bb       	out	0x12, r22	; 18
 4c8:	08 95       	ret

000004ca <DIO_u8ReadPort>:
 * RETURN : Reading of the port
 */

uint8 DIO_u8ReadPort(uint8 PortName){
	uint8 value;
	switch(PortName){
 4ca:	84 34       	cpi	r24, 0x44	; 68
 4cc:	d9 f0       	breq	.+54     	; 0x504 <DIO_u8ReadPort+0x3a>
 4ce:	85 34       	cpi	r24, 0x45	; 69
 4d0:	38 f4       	brcc	.+14     	; 0x4e0 <DIO_u8ReadPort+0x16>
 4d2:	82 34       	cpi	r24, 0x42	; 66
 4d4:	99 f0       	breq	.+38     	; 0x4fc <DIO_u8ReadPort+0x32>
 4d6:	83 34       	cpi	r24, 0x43	; 67
 4d8:	98 f4       	brcc	.+38     	; 0x500 <DIO_u8ReadPort+0x36>
 4da:	81 34       	cpi	r24, 0x41	; 65
 4dc:	a1 f4       	brne	.+40     	; 0x506 <DIO_u8ReadPort+0x3c>
 4de:	0c c0       	rjmp	.+24     	; 0x4f8 <DIO_u8ReadPort+0x2e>
 4e0:	82 36       	cpi	r24, 0x62	; 98
 4e2:	61 f0       	breq	.+24     	; 0x4fc <DIO_u8ReadPort+0x32>
 4e4:	83 36       	cpi	r24, 0x63	; 99
 4e6:	18 f4       	brcc	.+6      	; 0x4ee <DIO_u8ReadPort+0x24>
 4e8:	81 36       	cpi	r24, 0x61	; 97
 4ea:	69 f4       	brne	.+26     	; 0x506 <DIO_u8ReadPort+0x3c>
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <DIO_u8ReadPort+0x2e>
 4ee:	83 36       	cpi	r24, 0x63	; 99
 4f0:	39 f0       	breq	.+14     	; 0x500 <DIO_u8ReadPort+0x36>
 4f2:	84 36       	cpi	r24, 0x64	; 100
 4f4:	41 f4       	brne	.+16     	; 0x506 <DIO_u8ReadPort+0x3c>
 4f6:	06 c0       	rjmp	.+12     	; 0x504 <DIO_u8ReadPort+0x3a>
		case'A':
		case'a':
			value=PINA;
 4f8:	99 b3       	in	r25, 0x19	; 25
		break;
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <DIO_u8ReadPort+0x3c>
		case'B':
		case'b':
			value=PINB;
 4fc:	96 b3       	in	r25, 0x16	; 22

		break;
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <DIO_u8ReadPort+0x3c>
		case'C':
		case'c':
			value=PINC;
 500:	93 b3       	in	r25, 0x13	; 19

		break;
 502:	01 c0       	rjmp	.+2      	; 0x506 <DIO_u8ReadPort+0x3c>
		case'D':
		case'd':
			value=PIND;
 504:	90 b3       	in	r25, 0x10	; 16
		default:
		break;

	}
	return value;
}
 506:	89 2f       	mov	r24, r25
 508:	08 95       	ret

0000050a <DIO_voidTogglePort>:
 * DESCRIPTION : Used to toggle specific port
 * RETURN : No return
 */

void DIO_voidTogglePort(uint8 PortName){
	switch(PortName){
 50a:	84 34       	cpi	r24, 0x44	; 68
 50c:	09 f1       	breq	.+66     	; 0x550 <DIO_voidTogglePort+0x46>
 50e:	85 34       	cpi	r24, 0x45	; 69
 510:	38 f4       	brcc	.+14     	; 0x520 <DIO_voidTogglePort+0x16>
 512:	82 34       	cpi	r24, 0x42	; 66
 514:	a9 f0       	breq	.+42     	; 0x540 <DIO_voidTogglePort+0x36>
 516:	83 34       	cpi	r24, 0x43	; 67
 518:	b8 f4       	brcc	.+46     	; 0x548 <DIO_voidTogglePort+0x3e>
 51a:	81 34       	cpi	r24, 0x41	; 65
 51c:	e1 f4       	brne	.+56     	; 0x556 <DIO_voidTogglePort+0x4c>
 51e:	0c c0       	rjmp	.+24     	; 0x538 <DIO_voidTogglePort+0x2e>
 520:	82 36       	cpi	r24, 0x62	; 98
 522:	71 f0       	breq	.+28     	; 0x540 <DIO_voidTogglePort+0x36>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	18 f4       	brcc	.+6      	; 0x52e <DIO_voidTogglePort+0x24>
 528:	81 36       	cpi	r24, 0x61	; 97
 52a:	a9 f4       	brne	.+42     	; 0x556 <DIO_voidTogglePort+0x4c>
 52c:	05 c0       	rjmp	.+10     	; 0x538 <DIO_voidTogglePort+0x2e>
 52e:	83 36       	cpi	r24, 0x63	; 99
 530:	59 f0       	breq	.+22     	; 0x548 <DIO_voidTogglePort+0x3e>
 532:	84 36       	cpi	r24, 0x64	; 100
 534:	81 f4       	brne	.+32     	; 0x556 <DIO_voidTogglePort+0x4c>
 536:	0c c0       	rjmp	.+24     	; 0x550 <DIO_voidTogglePort+0x46>
		case'A':
		case'a':
			TOG_REG(PORTA);
 538:	8b b3       	in	r24, 0x1b	; 27
 53a:	80 95       	com	r24
 53c:	8b bb       	out	0x1b, r24	; 27
		break;
 53e:	08 95       	ret
		case'B':
		case'b':
			TOG_REG(PORTB);
 540:	88 b3       	in	r24, 0x18	; 24
 542:	80 95       	com	r24
 544:	88 bb       	out	0x18, r24	; 24

		break;
 546:	08 95       	ret
		case'C':
		case'c':
			TOG_REG(PORTC);
 548:	85 b3       	in	r24, 0x15	; 21
 54a:	80 95       	com	r24
 54c:	85 bb       	out	0x15, r24	; 21

		break;
 54e:	08 95       	ret
		case'D':
		case'd':
			TOG_REG(PORTD);
 550:	82 b3       	in	r24, 0x12	; 18
 552:	80 95       	com	r24
 554:	82 bb       	out	0x12, r24	; 18
 556:	08 95       	ret

00000558 <DIO_voidSetNibbleDir>:
 * DESCRIPTION : Used to toggle specific port
 * RETURN : No return
 */

void DIO_voidSetNibbleDir(uint8 PortName , uint8 value ,uint8 nibble){
	value&=0x0f; // to take only first 4 bits
 558:	6f 70       	andi	r22, 0x0F	; 15

	if(nibble){ //last 4 PINS
 55a:	44 23       	and	r20, r20
 55c:	c1 f1       	breq	.+112    	; 0x5ce <DIO_voidSetNibbleDir+0x76>
	value=value<<4;
 55e:	62 95       	swap	r22
 560:	60 7f       	andi	r22, 0xF0	; 240
	switch(PortName){
 562:	84 34       	cpi	r24, 0x44	; 68
 564:	69 f1       	breq	.+90     	; 0x5c0 <DIO_voidSetNibbleDir+0x68>
 566:	85 34       	cpi	r24, 0x45	; 69
 568:	40 f4       	brcc	.+16     	; 0x57a <DIO_voidSetNibbleDir+0x22>
 56a:	82 34       	cpi	r24, 0x42	; 66
 56c:	d9 f0       	breq	.+54     	; 0x5a4 <DIO_voidSetNibbleDir+0x4c>
 56e:	83 34       	cpi	r24, 0x43	; 67
 570:	00 f5       	brcc	.+64     	; 0x5b2 <DIO_voidSetNibbleDir+0x5a>
 572:	81 34       	cpi	r24, 0x41	; 65
 574:	09 f0       	breq	.+2      	; 0x578 <DIO_voidSetNibbleDir+0x20>
 576:	5d c0       	rjmp	.+186    	; 0x632 <DIO_voidSetNibbleDir+0xda>
 578:	0e c0       	rjmp	.+28     	; 0x596 <DIO_voidSetNibbleDir+0x3e>
 57a:	82 36       	cpi	r24, 0x62	; 98
 57c:	99 f0       	breq	.+38     	; 0x5a4 <DIO_voidSetNibbleDir+0x4c>
 57e:	83 36       	cpi	r24, 0x63	; 99
 580:	20 f4       	brcc	.+8      	; 0x58a <DIO_voidSetNibbleDir+0x32>
 582:	81 36       	cpi	r24, 0x61	; 97
 584:	09 f0       	breq	.+2      	; 0x588 <DIO_voidSetNibbleDir+0x30>
 586:	55 c0       	rjmp	.+170    	; 0x632 <DIO_voidSetNibbleDir+0xda>
 588:	06 c0       	rjmp	.+12     	; 0x596 <DIO_voidSetNibbleDir+0x3e>
 58a:	83 36       	cpi	r24, 0x63	; 99
 58c:	91 f0       	breq	.+36     	; 0x5b2 <DIO_voidSetNibbleDir+0x5a>
 58e:	84 36       	cpi	r24, 0x64	; 100
 590:	09 f0       	breq	.+2      	; 0x594 <DIO_voidSetNibbleDir+0x3c>
 592:	4f c0       	rjmp	.+158    	; 0x632 <DIO_voidSetNibbleDir+0xda>
 594:	15 c0       	rjmp	.+42     	; 0x5c0 <DIO_voidSetNibbleDir+0x68>
			case'A':
			case'a':

				DDRA&=0x0f;
 596:	8a b3       	in	r24, 0x1a	; 26
 598:	8f 70       	andi	r24, 0x0F	; 15
 59a:	8a bb       	out	0x1a, r24	; 26
				DDRA|=value;
 59c:	8a b3       	in	r24, 0x1a	; 26
 59e:	68 2b       	or	r22, r24
 5a0:	6a bb       	out	0x1a, r22	; 26


			break;
 5a2:	08 95       	ret

			case'B':
			case'b':
				DDRB&=0x0f;
 5a4:	87 b3       	in	r24, 0x17	; 23
 5a6:	8f 70       	andi	r24, 0x0F	; 15
 5a8:	87 bb       	out	0x17, r24	; 23
				DDRB|=value;
 5aa:	87 b3       	in	r24, 0x17	; 23
 5ac:	68 2b       	or	r22, r24
 5ae:	67 bb       	out	0x17, r22	; 23

			break;
 5b0:	08 95       	ret

			case'C':
			case'c':
				PORTC&=0x0f;
 5b2:	85 b3       	in	r24, 0x15	; 21
 5b4:	8f 70       	andi	r24, 0x0F	; 15
 5b6:	85 bb       	out	0x15, r24	; 21
				PORTC|=value;
 5b8:	85 b3       	in	r24, 0x15	; 21
 5ba:	68 2b       	or	r22, r24
 5bc:	65 bb       	out	0x15, r22	; 21

			break;
 5be:	08 95       	ret

			case'D':
			case'd':
				DDRD&=0x0f;
 5c0:	81 b3       	in	r24, 0x11	; 17
 5c2:	8f 70       	andi	r24, 0x0F	; 15
 5c4:	81 bb       	out	0x11, r24	; 17
				DDRD|=value;
 5c6:	81 b3       	in	r24, 0x11	; 17
 5c8:	68 2b       	or	r22, r24
 5ca:	61 bb       	out	0x11, r22	; 17

			break;
 5cc:	08 95       	ret
			default:
				break;
	}}
	else{
		switch(PortName){
 5ce:	84 34       	cpi	r24, 0x44	; 68
 5d0:	51 f1       	breq	.+84     	; 0x626 <DIO_voidSetNibbleDir+0xce>
 5d2:	85 34       	cpi	r24, 0x45	; 69
 5d4:	38 f4       	brcc	.+14     	; 0x5e4 <DIO_voidSetNibbleDir+0x8c>
 5d6:	82 34       	cpi	r24, 0x42	; 66
 5d8:	c1 f0       	breq	.+48     	; 0x60a <DIO_voidSetNibbleDir+0xb2>
 5da:	83 34       	cpi	r24, 0x43	; 67
 5dc:	e8 f4       	brcc	.+58     	; 0x618 <DIO_voidSetNibbleDir+0xc0>
 5de:	81 34       	cpi	r24, 0x41	; 65
 5e0:	41 f5       	brne	.+80     	; 0x632 <DIO_voidSetNibbleDir+0xda>
 5e2:	0c c0       	rjmp	.+24     	; 0x5fc <DIO_voidSetNibbleDir+0xa4>
 5e4:	82 36       	cpi	r24, 0x62	; 98
 5e6:	89 f0       	breq	.+34     	; 0x60a <DIO_voidSetNibbleDir+0xb2>
 5e8:	83 36       	cpi	r24, 0x63	; 99
 5ea:	18 f4       	brcc	.+6      	; 0x5f2 <DIO_voidSetNibbleDir+0x9a>
 5ec:	81 36       	cpi	r24, 0x61	; 97
 5ee:	09 f5       	brne	.+66     	; 0x632 <DIO_voidSetNibbleDir+0xda>
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <DIO_voidSetNibbleDir+0xa4>
 5f2:	83 36       	cpi	r24, 0x63	; 99
 5f4:	89 f0       	breq	.+34     	; 0x618 <DIO_voidSetNibbleDir+0xc0>
 5f6:	84 36       	cpi	r24, 0x64	; 100
 5f8:	e1 f4       	brne	.+56     	; 0x632 <DIO_voidSetNibbleDir+0xda>
 5fa:	15 c0       	rjmp	.+42     	; 0x626 <DIO_voidSetNibbleDir+0xce>
			case'A':
			case'a':

					DDRA&=0xf0;
 5fc:	8a b3       	in	r24, 0x1a	; 26
 5fe:	80 7f       	andi	r24, 0xF0	; 240
 600:	8a bb       	out	0x1a, r24	; 26
					DDRA|=value;
 602:	8a b3       	in	r24, 0x1a	; 26
 604:	68 2b       	or	r22, r24
 606:	6a bb       	out	0x1a, r22	; 26


			break;
 608:	08 95       	ret

		    case'B':
			case'b':
					DDRB&=0xf0;
 60a:	87 b3       	in	r24, 0x17	; 23
 60c:	80 7f       	andi	r24, 0xF0	; 240
 60e:	87 bb       	out	0x17, r24	; 23
					DDRB|=value;
 610:	87 b3       	in	r24, 0x17	; 23
 612:	68 2b       	or	r22, r24
 614:	67 bb       	out	0x17, r22	; 23

			break;
 616:	08 95       	ret

			case'C':
			case'c':
					DDRC&=0xf0;
 618:	84 b3       	in	r24, 0x14	; 20
 61a:	80 7f       	andi	r24, 0xF0	; 240
 61c:	84 bb       	out	0x14, r24	; 20
					DDRC|=value;
 61e:	84 b3       	in	r24, 0x14	; 20
 620:	68 2b       	or	r22, r24
 622:	64 bb       	out	0x14, r22	; 20

			break;
 624:	08 95       	ret

			case'D':
			case'd':
				    DDRD&=0xf0;
 626:	81 b3       	in	r24, 0x11	; 17
 628:	80 7f       	andi	r24, 0xF0	; 240
 62a:	81 bb       	out	0x11, r24	; 17
					DDRD|=value;
 62c:	81 b3       	in	r24, 0x11	; 17
 62e:	68 2b       	or	r22, r24
 630:	61 bb       	out	0x11, r22	; 17
 632:	08 95       	ret

00000634 <DIO_voidWriteNibble>:
 * DESCRIPTION : Used to toggle specific port
 * RETURN : No return
 */

void DIO_voidWriteNibble(uint8 PortName , uint8 value ,uint8 nibble){
	value&=0x0f; // to take only first 4 bits
 634:	6f 70       	andi	r22, 0x0F	; 15

	if(nibble){ //last 4 PINS
 636:	44 23       	and	r20, r20
 638:	c1 f1       	breq	.+112    	; 0x6aa <DIO_voidWriteNibble+0x76>
	value=value<<4;
 63a:	62 95       	swap	r22
 63c:	60 7f       	andi	r22, 0xF0	; 240
	switch(PortName){
 63e:	84 34       	cpi	r24, 0x44	; 68
 640:	69 f1       	breq	.+90     	; 0x69c <DIO_voidWriteNibble+0x68>
 642:	85 34       	cpi	r24, 0x45	; 69
 644:	40 f4       	brcc	.+16     	; 0x656 <DIO_voidWriteNibble+0x22>
 646:	82 34       	cpi	r24, 0x42	; 66
 648:	d9 f0       	breq	.+54     	; 0x680 <DIO_voidWriteNibble+0x4c>
 64a:	83 34       	cpi	r24, 0x43	; 67
 64c:	00 f5       	brcc	.+64     	; 0x68e <DIO_voidWriteNibble+0x5a>
 64e:	81 34       	cpi	r24, 0x41	; 65
 650:	09 f0       	breq	.+2      	; 0x654 <DIO_voidWriteNibble+0x20>
 652:	5d c0       	rjmp	.+186    	; 0x70e <DIO_voidWriteNibble+0xda>
 654:	0e c0       	rjmp	.+28     	; 0x672 <DIO_voidWriteNibble+0x3e>
 656:	82 36       	cpi	r24, 0x62	; 98
 658:	99 f0       	breq	.+38     	; 0x680 <DIO_voidWriteNibble+0x4c>
 65a:	83 36       	cpi	r24, 0x63	; 99
 65c:	20 f4       	brcc	.+8      	; 0x666 <DIO_voidWriteNibble+0x32>
 65e:	81 36       	cpi	r24, 0x61	; 97
 660:	09 f0       	breq	.+2      	; 0x664 <DIO_voidWriteNibble+0x30>
 662:	55 c0       	rjmp	.+170    	; 0x70e <DIO_voidWriteNibble+0xda>
 664:	06 c0       	rjmp	.+12     	; 0x672 <DIO_voidWriteNibble+0x3e>
 666:	83 36       	cpi	r24, 0x63	; 99
 668:	91 f0       	breq	.+36     	; 0x68e <DIO_voidWriteNibble+0x5a>
 66a:	84 36       	cpi	r24, 0x64	; 100
 66c:	09 f0       	breq	.+2      	; 0x670 <DIO_voidWriteNibble+0x3c>
 66e:	4f c0       	rjmp	.+158    	; 0x70e <DIO_voidWriteNibble+0xda>
 670:	15 c0       	rjmp	.+42     	; 0x69c <DIO_voidWriteNibble+0x68>
			case'A':
			case'a':

				PORTA&=0x0f;
 672:	8b b3       	in	r24, 0x1b	; 27
 674:	8f 70       	andi	r24, 0x0F	; 15
 676:	8b bb       	out	0x1b, r24	; 27
				PORTA|=value;
 678:	8b b3       	in	r24, 0x1b	; 27
 67a:	68 2b       	or	r22, r24
 67c:	6b bb       	out	0x1b, r22	; 27


			break;
 67e:	08 95       	ret

			case'B':
			case'b':
				PORTB&=0x0f;
 680:	88 b3       	in	r24, 0x18	; 24
 682:	8f 70       	andi	r24, 0x0F	; 15
 684:	88 bb       	out	0x18, r24	; 24
				PORTB|=value;
 686:	88 b3       	in	r24, 0x18	; 24
 688:	68 2b       	or	r22, r24
 68a:	68 bb       	out	0x18, r22	; 24

			break;
 68c:	08 95       	ret

			case'C':
			case'c':
				PORTC&=0x0f;
 68e:	85 b3       	in	r24, 0x15	; 21
 690:	8f 70       	andi	r24, 0x0F	; 15
 692:	85 bb       	out	0x15, r24	; 21
				PORTC|=value;
 694:	85 b3       	in	r24, 0x15	; 21
 696:	68 2b       	or	r22, r24
 698:	65 bb       	out	0x15, r22	; 21

			break;
 69a:	08 95       	ret

			case'D':
			case'd':
				PORTD&=0x0f;
 69c:	82 b3       	in	r24, 0x12	; 18
 69e:	8f 70       	andi	r24, 0x0F	; 15
 6a0:	82 bb       	out	0x12, r24	; 18
				PORTD|=value;
 6a2:	82 b3       	in	r24, 0x12	; 18
 6a4:	68 2b       	or	r22, r24
 6a6:	62 bb       	out	0x12, r22	; 18

			break;
 6a8:	08 95       	ret
			default:
				break;
	}}
	else{
		switch(PortName){
 6aa:	84 34       	cpi	r24, 0x44	; 68
 6ac:	51 f1       	breq	.+84     	; 0x702 <DIO_voidWriteNibble+0xce>
 6ae:	85 34       	cpi	r24, 0x45	; 69
 6b0:	38 f4       	brcc	.+14     	; 0x6c0 <DIO_voidWriteNibble+0x8c>
 6b2:	82 34       	cpi	r24, 0x42	; 66
 6b4:	c1 f0       	breq	.+48     	; 0x6e6 <DIO_voidWriteNibble+0xb2>
 6b6:	83 34       	cpi	r24, 0x43	; 67
 6b8:	e8 f4       	brcc	.+58     	; 0x6f4 <DIO_voidWriteNibble+0xc0>
 6ba:	81 34       	cpi	r24, 0x41	; 65
 6bc:	41 f5       	brne	.+80     	; 0x70e <DIO_voidWriteNibble+0xda>
 6be:	0c c0       	rjmp	.+24     	; 0x6d8 <DIO_voidWriteNibble+0xa4>
 6c0:	82 36       	cpi	r24, 0x62	; 98
 6c2:	89 f0       	breq	.+34     	; 0x6e6 <DIO_voidWriteNibble+0xb2>
 6c4:	83 36       	cpi	r24, 0x63	; 99
 6c6:	18 f4       	brcc	.+6      	; 0x6ce <DIO_voidWriteNibble+0x9a>
 6c8:	81 36       	cpi	r24, 0x61	; 97
 6ca:	09 f5       	brne	.+66     	; 0x70e <DIO_voidWriteNibble+0xda>
 6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <DIO_voidWriteNibble+0xa4>
 6ce:	83 36       	cpi	r24, 0x63	; 99
 6d0:	89 f0       	breq	.+34     	; 0x6f4 <DIO_voidWriteNibble+0xc0>
 6d2:	84 36       	cpi	r24, 0x64	; 100
 6d4:	e1 f4       	brne	.+56     	; 0x70e <DIO_voidWriteNibble+0xda>
 6d6:	15 c0       	rjmp	.+42     	; 0x702 <DIO_voidWriteNibble+0xce>
			case'A':
			case'a':

					PORTA&=0xf0;
 6d8:	8b b3       	in	r24, 0x1b	; 27
 6da:	80 7f       	andi	r24, 0xF0	; 240
 6dc:	8b bb       	out	0x1b, r24	; 27
					PORTA|=value;
 6de:	8b b3       	in	r24, 0x1b	; 27
 6e0:	68 2b       	or	r22, r24
 6e2:	6b bb       	out	0x1b, r22	; 27


			break;
 6e4:	08 95       	ret

		    case'B':
			case'b':
					PORTB&=0xf0;
 6e6:	88 b3       	in	r24, 0x18	; 24
 6e8:	80 7f       	andi	r24, 0xF0	; 240
 6ea:	88 bb       	out	0x18, r24	; 24
					PORTB|=value;
 6ec:	88 b3       	in	r24, 0x18	; 24
 6ee:	68 2b       	or	r22, r24
 6f0:	68 bb       	out	0x18, r22	; 24

			break;
 6f2:	08 95       	ret

			case'C':
			case'c':
					PORTC&=0xf0;
 6f4:	85 b3       	in	r24, 0x15	; 21
 6f6:	80 7f       	andi	r24, 0xF0	; 240
 6f8:	85 bb       	out	0x15, r24	; 21
					PORTC|=value;
 6fa:	85 b3       	in	r24, 0x15	; 21
 6fc:	68 2b       	or	r22, r24
 6fe:	65 bb       	out	0x15, r22	; 21

			break;
 700:	08 95       	ret

			case'D':
			case'd':
					PORTD&=0xf0;
 702:	82 b3       	in	r24, 0x12	; 18
 704:	80 7f       	andi	r24, 0xF0	; 240
 706:	82 bb       	out	0x12, r24	; 18
					PORTD|=value;
 708:	82 b3       	in	r24, 0x12	; 18
 70a:	68 2b       	or	r22, r24
 70c:	62 bb       	out	0x12, r22	; 18
 70e:	08 95       	ret

00000710 <DIO_voidConnectPullUp>:
	 * DDRx N must be INPUT
	 * PORT xN =1
 * RETURN : No return
 */
void DIO_voidConnectPullUp(uint8 PortName , uint8 PinNumber , uint8 connect){
	DIO_voidWritePin(PortName,PinNumber,connect);
 710:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>


}
 714:	08 95       	ret

00000716 <EEPROM_vWrite>:
#include "STD_MACROS.h"
#include "EEPROM.h"

void EEPROM_vWrite(uint16 address, uint8 data) {
    // put the address in EEAR register
    EEARL = (sint8) address;
 716:	8e bb       	out	0x1e, r24	; 30
    EEARH = (sint8) (address >> 8);
 718:	9f bb       	out	0x1f, r25	; 31

    // put the data in data register
    EEDR = data;
 71a:	6d bb       	out	0x1d, r22	; 29

    // set to write
    SET_BIT(EECR, EEMWE);
 71c:	e2 9a       	sbi	0x1c, 2	; 28
    SET_BIT(EECR, EEWE);
 71e:	e1 9a       	sbi	0x1c, 1	; 28

    // polling until it is finished
      while (READ_BIT(EECR, EEWE)==1);
 720:	e1 99       	sbic	0x1c, 1	; 28
 722:	fe cf       	rjmp	.-4      	; 0x720 <EEPROM_vWrite+0xa>
}
 724:	08 95       	ret

00000726 <EEPROM_u8Read>:

uint8 EEPROM_u8Read(uint16 address) {
    // put the address in EEAR register
    EEARL = (uint8) address;
 726:	8e bb       	out	0x1e, r24	; 30
    EEARH = (uint8) (address >> 8);
 728:	9f bb       	out	0x1f, r25	; 31

    // set to read
    SET_BIT(EECR, EERE);
 72a:	e0 9a       	sbi	0x1c, 0	; 28

    // return the data
  return EEDR;
 72c:	8d b3       	in	r24, 0x1d	; 29
}
 72e:	08 95       	ret

00000730 <KEYPAD_vInit>:

#define PORTNAME 'A'


void KEYPAD_vInit(void){
	DIO_voidSetNibbleDir(PORTNAME,0x0f,0);
 730:	81 e4       	ldi	r24, 0x41	; 65
 732:	6f e0       	ldi	r22, 0x0F	; 15
 734:	40 e0       	ldi	r20, 0x00	; 0
 736:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_voidSetNibbleDir>
	DIO_voidSetNibbleDir(PORTNAME,0,1);
 73a:	81 e4       	ldi	r24, 0x41	; 65
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	41 e0       	ldi	r20, 0x01	; 1
 740:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_voidSetNibbleDir>
	// may cause problem if it is done on hardware can be fixed if it is connected pull up on hardware
	DIO_voidConnectPullUp(PORTNAME,4,1);
 744:	81 e4       	ldi	r24, 0x41	; 65
 746:	64 e0       	ldi	r22, 0x04	; 4
 748:	41 e0       	ldi	r20, 0x01	; 1
 74a:	0e 94 88 03 	call	0x710	; 0x710 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(PORTNAME,5,1);
 74e:	81 e4       	ldi	r24, 0x41	; 65
 750:	65 e0       	ldi	r22, 0x05	; 5
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	0e 94 88 03 	call	0x710	; 0x710 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(PORTNAME,6,1);
 758:	81 e4       	ldi	r24, 0x41	; 65
 75a:	66 e0       	ldi	r22, 0x06	; 6
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	0e 94 88 03 	call	0x710	; 0x710 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(PORTNAME,7,1);
 762:	81 e4       	ldi	r24, 0x41	; 65
 764:	67 e0       	ldi	r22, 0x07	; 7
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	0e 94 88 03 	call	0x710	; 0x710 <DIO_voidConnectPullUp>
}
 76c:	08 95       	ret

0000076e <KEYPAD_u8Read>:

uint8 KEYPAD_u8Read(void){
 76e:	ef 92       	push	r14
 770:	ff 92       	push	r15
 772:	1f 93       	push	r17
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	60 97       	sbiw	r28, 0x10	; 16
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
	uint8 row = 0;
	uint8 column = 0;
	uint8 return_value = NOTPRESSED;
	uint8 ascii_value[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 788:	de 01       	movw	r26, r28
 78a:	11 96       	adiw	r26, 0x01	; 1
 78c:	e0 e6       	ldi	r30, 0x60	; 96
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 e1       	ldi	r24, 0x10	; 16
 792:	01 90       	ld	r0, Z+
 794:	0d 92       	st	X+, r0
 796:	81 50       	subi	r24, 0x01	; 1
 798:	e1 f7       	brne	.-8      	; 0x792 <KEYPAD_u8Read+0x24>
 79a:	ee 24       	eor	r14, r14
 79c:	ff 24       	eor	r15, r15
		
	for(row = 0 ; row < 4 ; row++) {
		DIO_voidWriteNibble(PORTNAME,0x0f,0);
 79e:	81 e4       	ldi	r24, 0x41	; 65
 7a0:	6f e0       	ldi	r22, 0x0F	; 15
 7a2:	40 e0       	ldi	r20, 0x00	; 0
 7a4:	0e 94 1a 03 	call	0x634	; 0x634 <DIO_voidWriteNibble>
		DIO_voidWritePin(PORTNAME,row,0);
 7a8:	81 e4       	ldi	r24, 0x41	; 65
 7aa:	6e 2d       	mov	r22, r14
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
		for(column = 0 ; column < 4 ; column++){
 7b2:	10 e0       	ldi	r17, 0x00	; 0
			if(0==BUTTON_u8Read(PORTNAME,column+4)){
 7b4:	61 2f       	mov	r22, r17
 7b6:	6c 5f       	subi	r22, 0xFC	; 252
 7b8:	81 e4       	ldi	r24, 0x41	; 65
 7ba:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_u8Read>
 7be:	88 23       	and	r24, r24
 7c0:	89 f4       	brne	.+34     	; 0x7e4 <KEYPAD_u8Read+0x76>
				return_value=ascii_value[row][column];
 7c2:	f7 01       	movw	r30, r14
 7c4:	ee 0f       	add	r30, r30
 7c6:	ff 1f       	adc	r31, r31
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	e1 0f       	add	r30, r17
 7ce:	f1 1d       	adc	r31, r1
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	8c 0f       	add	r24, r28
 7d6:	9d 1f       	adc	r25, r29
 7d8:	e8 0f       	add	r30, r24
 7da:	f9 1f       	adc	r31, r25
 7dc:	80 81       	ld	r24, Z
				break;
			}
		}
		if (return_value != NOTPRESSED)
 7de:	8f 3f       	cpi	r24, 0xFF	; 255
 7e0:	21 f0       	breq	.+8      	; 0x7ea <KEYPAD_u8Read+0x7c>
 7e2:	0b c0       	rjmp	.+22     	; 0x7fa <KEYPAD_u8Read+0x8c>
	uint8 ascii_value[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
		
	for(row = 0 ; row < 4 ; row++) {
		DIO_voidWriteNibble(PORTNAME,0x0f,0);
		DIO_voidWritePin(PORTNAME,row,0);
		for(column = 0 ; column < 4 ; column++){
 7e4:	1f 5f       	subi	r17, 0xFF	; 255
 7e6:	14 30       	cpi	r17, 0x04	; 4
 7e8:	29 f7       	brne	.-54     	; 0x7b4 <KEYPAD_u8Read+0x46>
 7ea:	08 94       	sec
 7ec:	e1 1c       	adc	r14, r1
 7ee:	f1 1c       	adc	r15, r1
	uint8 row = 0;
	uint8 column = 0;
	uint8 return_value = NOTPRESSED;
	uint8 ascii_value[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
		
	for(row = 0 ; row < 4 ; row++) {
 7f0:	94 e0       	ldi	r25, 0x04	; 4
 7f2:	e9 16       	cp	r14, r25
 7f4:	f1 04       	cpc	r15, r1
 7f6:	99 f6       	brne	.-90     	; 0x79e <KEYPAD_u8Read+0x30>
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
	}
	return return_value;
	
 7fa:	60 96       	adiw	r28, 0x10	; 16
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	ff 90       	pop	r15
 80e:	ef 90       	pop	r14
 810:	08 95       	ret

00000812 <Enable>:


#define LAST4 1

static void Enable(void){
	DIO_voidWritePin(EPORT,EPIN,HIGH);
 812:	83 e4       	ldi	r24, 0x43	; 67
 814:	63 e0       	ldi	r22, 0x03	; 3
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 81c:	83 ef       	ldi	r24, 0xF3	; 243
 81e:	91 e0       	ldi	r25, 0x01	; 1
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	f1 f7       	brne	.-4      	; 0x820 <Enable+0xe>
 824:	00 c0       	rjmp	.+0      	; 0x826 <Enable+0x14>
 826:	00 00       	nop
	_delay_ms(2);
	DIO_voidWritePin(EPORT,EPIN,LOW);
 828:	83 e4       	ldi	r24, 0x43	; 67
 82a:	63 e0       	ldi	r22, 0x03	; 3
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
 832:	83 ef       	ldi	r24, 0xF3	; 243
 834:	91 e0       	ldi	r25, 0x01	; 1
 836:	01 97       	sbiw	r24, 0x01	; 1
 838:	f1 f7       	brne	.-4      	; 0x836 <Enable+0x24>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <Enable+0x2a>
 83c:	00 00       	nop
	_delay_ms(2);
}
 83e:	08 95       	ret

00000840 <LCD_vSendCmd>:
	LCD_vSendCmd(DISPLAYON_CURSOROFF_COM);
	LCD_vSendCmd(MOVE_2RIGHT_COM);
	
	
}
void LCD_vSendCmd(uint8 command){
 840:	cf 93       	push	r28
 842:	c8 2f       	mov	r28, r24
	DIO_voidWritePin(RWPORT,RWPIN,LOW);
 844:	83 e4       	ldi	r24, 0x43	; 67
 846:	62 e0       	ldi	r22, 0x02	; 2
 848:	40 e0       	ldi	r20, 0x00	; 0
 84a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	#ifdef EIGHT_BIT_MODE
	DIO_voidWritePort(PORT_8MODE,command);
 84e:	84 e4       	ldi	r24, 0x44	; 68
 850:	6c 2f       	mov	r22, r28
 852:	0e 94 46 02 	call	0x48c	; 0x48c <DIO_voidWritePort>
	DIO_voidWritePin(RSPORT,RSPIN,LOW);
 856:	83 e4       	ldi	r24, 0x43	; 67
 858:	61 e0       	ldi	r22, 0x01	; 1
 85a:	40 e0       	ldi	r20, 0x00	; 0
 85c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	Enable();
 860:	0e 94 09 04 	call	0x812	; 0x812 <Enable>
 864:	89 ef       	ldi	r24, 0xF9	; 249
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
 86e:	00 00       	nop
	Enable();
	DIO_voidWriteNibble(PORT_4MODE,command,LAST4);
	Enable();
	#endif
	
}
 870:	cf 91       	pop	r28
 872:	08 95       	ret

00000874 <LCD_vInit>:
	DIO_voidWritePin(EPORT,EPIN,HIGH);
	_delay_ms(2);
	DIO_voidWritePin(EPORT,EPIN,LOW);
	_delay_ms(2);
}
void LCD_vInit(void){
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
	DIO_voidSetPortDir(PORT_8MODE,0XFF);
 878:	84 e4       	ldi	r24, 0x44	; 68
 87a:	6f ef       	ldi	r22, 0xFF	; 255
 87c:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_voidSetPortDir>
	DIO_voidSetPinDir(RSPORT,RSPIN,OUTPUT_PIN);
 880:	83 e4       	ldi	r24, 0x43	; 67
 882:	61 e0       	ldi	r22, 0x01	; 1
 884:	41 e0       	ldi	r20, 0x01	; 1
 886:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(RWPORT,RWPIN,OUTPUT_PIN);
 88a:	83 e4       	ldi	r24, 0x43	; 67
 88c:	62 e0       	ldi	r22, 0x02	; 2
 88e:	41 e0       	ldi	r20, 0x01	; 1
 890:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(EPORT,EPIN,OUTPUT_PIN);
 894:	83 e4       	ldi	r24, 0x43	; 67
 896:	63 e0       	ldi	r22, 0x03	; 3
 898:	41 e0       	ldi	r20, 0x01	; 1
 89a:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_voidSetPinDir>
	
	#ifdef EIGHT_BIT_MODE
	LCD_vSendCmd(EIGHT_BIT_COM);
 89e:	c0 e2       	ldi	r28, 0x20	; 32
 8a0:	d4 e0       	ldi	r29, 0x04	; 4
 8a2:	88 e3       	ldi	r24, 0x38	; 56
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	fe 01       	movw	r30, r28
 8a8:	09 95       	icall
	#else
	LCD_vSendCmd(RETURN_HOME);
	LCD_vSendCmd(FOUR_BIT_COM);
	#endif
	
	LCD_vSendCmd(CLRCOM);
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	fe 01       	movw	r30, r28
 8b0:	09 95       	icall
	LCD_vSendCmd(DISPLAYON_CURSOROFF_COM);
 8b2:	8c e0       	ldi	r24, 0x0C	; 12
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	fe 01       	movw	r30, r28
 8b8:	09 95       	icall
	LCD_vSendCmd(MOVE_2RIGHT_COM);
 8ba:	86 e0       	ldi	r24, 0x06	; 6
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	fe 01       	movw	r30, r28
 8c0:	09 95       	icall
	
	
}
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	08 95       	ret

000008c8 <LCD_vSendData>:
	DIO_voidWriteNibble(PORT_4MODE,command,LAST4);
	Enable();
	#endif
	
}
void LCD_vSendData(uint8 data){
 8c8:	cf 93       	push	r28
 8ca:	c8 2f       	mov	r28, r24
	DIO_voidWritePin(RWPORT,RWPIN,LOW);
 8cc:	83 e4       	ldi	r24, 0x43	; 67
 8ce:	62 e0       	ldi	r22, 0x02	; 2
 8d0:	40 e0       	ldi	r20, 0x00	; 0
 8d2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	#ifdef EIGHT_BIT_MODE
	DIO_voidWritePort(PORT_8MODE,data);
 8d6:	84 e4       	ldi	r24, 0x44	; 68
 8d8:	6c 2f       	mov	r22, r28
 8da:	0e 94 46 02 	call	0x48c	; 0x48c <DIO_voidWritePort>
	DIO_voidWritePin(RSPORT,RSPIN,HIGH);
 8de:	83 e4       	ldi	r24, 0x43	; 67
 8e0:	61 e0       	ldi	r22, 0x01	; 1
 8e2:	41 e0       	ldi	r20, 0x01	; 1
 8e4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidWritePin>
	Enable();
 8e8:	0e 94 09 04 	call	0x812	; 0x812 <Enable>
	DIO_voidWritePin(RSPORT,RSPIN,HIGH);
	Enable();
	DIO_voidWriteNibble(PORT_4MODE,data,LAST4);
	Enable();
	#endif
}
 8ec:	cf 91       	pop	r28
 8ee:	08 95       	ret

000008f0 <LCD_vCLR>:
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	0e 94 20 04 	call	0x840	; 0x840 <LCD_vSendCmd>
 8f6:	83 ec       	ldi	r24, 0xC3	; 195
 8f8:	99 e0       	ldi	r25, 0x09	; 9
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCD_vCLR+0xa>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <LCD_vCLR+0x10>
 900:	00 00       	nop
	_delay_ms(10);
}
 902:	08 95       	ret

00000904 <LCD_vSendString>:
void LCD_vSendString(uint8* ptr){
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	ec 01       	movw	r28, r24
	while(*ptr!=0){
 90a:	88 81       	ld	r24, Y
 90c:	88 23       	and	r24, r24
 90e:	31 f0       	breq	.+12     	; 0x91c <LCD_vSendString+0x18>
}
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
	_delay_ms(10);
}
void LCD_vSendString(uint8* ptr){
 910:	21 96       	adiw	r28, 0x01	; 1
	while(*ptr!=0){
		LCD_vSendData(*ptr);
 912:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vSendData>
void LCD_vCLR(void){
	LCD_vSendCmd(CLRCOM);
	_delay_ms(10);
}
void LCD_vSendString(uint8* ptr){
	while(*ptr!=0){
 916:	89 91       	ld	r24, Y+
 918:	88 23       	and	r24, r24
 91a:	d9 f7       	brne	.-10     	; 0x912 <LCD_vSendString+0xe>
		LCD_vSendData(*ptr);
		ptr++;
	}
}
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <LCD_vMoveCursor>:
void LCD_vMoveCursor(uint8 row ,uint8 column){
	uint8 data;
	if((row>2)||(row<1)||(column<1)||(column>16)){
 922:	28 2f       	mov	r18, r24
 924:	21 50       	subi	r18, 0x01	; 1
 926:	22 30       	cpi	r18, 0x02	; 2
 928:	70 f4       	brcc	.+28     	; 0x946 <LCD_vMoveCursor+0x24>
 92a:	66 23       	and	r22, r22
 92c:	71 f0       	breq	.+28     	; 0x94a <LCD_vMoveCursor+0x28>
 92e:	61 31       	cpi	r22, 0x11	; 17
 930:	70 f4       	brcc	.+28     	; 0x94e <LCD_vMoveCursor+0x2c>
		data=FIRST_ROW_COM;
	}
	else if(row==1){
 932:	81 30       	cpi	r24, 0x01	; 1
 934:	19 f4       	brne	.+6      	; 0x93c <LCD_vMoveCursor+0x1a>
		data=FIRST_ROW_COM+column-1;
 936:	96 2f       	mov	r25, r22
 938:	91 58       	subi	r25, 0x81	; 129
 93a:	0a c0       	rjmp	.+20     	; 0x950 <LCD_vMoveCursor+0x2e>
	}
	else if(row==2){
 93c:	82 30       	cpi	r24, 0x02	; 2
 93e:	41 f4       	brne	.+16     	; 0x950 <LCD_vMoveCursor+0x2e>
		data=SECOND_ROW_COM+column-1;
 940:	96 2f       	mov	r25, r22
 942:	91 54       	subi	r25, 0x41	; 65
 944:	05 c0       	rjmp	.+10     	; 0x950 <LCD_vMoveCursor+0x2e>
	}
}
void LCD_vMoveCursor(uint8 row ,uint8 column){
	uint8 data;
	if((row>2)||(row<1)||(column<1)||(column>16)){
		data=FIRST_ROW_COM;
 946:	90 e8       	ldi	r25, 0x80	; 128
 948:	03 c0       	rjmp	.+6      	; 0x950 <LCD_vMoveCursor+0x2e>
 94a:	90 e8       	ldi	r25, 0x80	; 128
 94c:	01 c0       	rjmp	.+2      	; 0x950 <LCD_vMoveCursor+0x2e>
 94e:	90 e8       	ldi	r25, 0x80	; 128
		data=SECOND_ROW_COM+column-1;
	}
	else{
		
	}
	LCD_vSendCmd(data);
 950:	89 2f       	mov	r24, r25
 952:	0e 94 20 04 	call	0x840	; 0x840 <LCD_vSendCmd>
}
 956:	08 95       	ret

00000958 <SET_PASS>:
uint8 i;
uint8 val = NOTPRESSED;

void SET_PASS(void){

	LCD_vSendString("SET PASS : ");
 958:	80 e7       	ldi	r24, 0x70	; 112
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 82 04 	call	0x904	; 0x904 <LCD_vSendString>
	for(i=0;i<4;i++){
 960:	10 92 d2 00 	sts	0x00D2, r1
		do{
			val=KEYPAD_u8Read();
 964:	0e 94 b7 03 	call	0x76e	; 0x76e <KEYPAD_u8Read>
 968:	80 93 cc 00 	sts	0x00CC, r24
			
		}while(val == NOTPRESSED);
 96c:	8f 3f       	cpi	r24, 0xFF	; 255
 96e:	d1 f3       	breq	.-12     	; 0x964 <SET_PASS+0xc>
		LCD_vSendData(val);
 970:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vSendData>
 974:	8f e9       	ldi	r24, 0x9F	; 159
 976:	96 e8       	ldi	r25, 0x86	; 134
 978:	a1 e0       	ldi	r26, 0x01	; 1
 97a:	81 50       	subi	r24, 0x01	; 1
 97c:	90 40       	sbci	r25, 0x00	; 0
 97e:	a0 40       	sbci	r26, 0x00	; 0
 980:	e1 f7       	brne	.-8      	; 0x97a <SET_PASS+0x22>
 982:	00 c0       	rjmp	.+0      	; 0x984 <SET_PASS+0x2c>
 984:	00 00       	nop
		_delay_ms(500);
		LCD_vMoveCursor(1,12+i);
 986:	60 91 d2 00 	lds	r22, 0x00D2
 98a:	64 5f       	subi	r22, 0xF4	; 244
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	0e 94 91 04 	call	0x922	; 0x922 <LCD_vMoveCursor>
		LCD_vSendData('*');
 992:	8a e2       	ldi	r24, 0x2A	; 42
 994:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vSendData>
		EEPROM_vWrite(EEPROM_PASS_LOC1+i,val);
 998:	80 91 d2 00 	lds	r24, 0x00D2
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	81 96       	adiw	r24, 0x21	; 33
 9a0:	60 91 cc 00 	lds	r22, 0x00CC
 9a4:	0e 94 8b 03 	call	0x716	; 0x716 <EEPROM_vWrite>
uint8 val = NOTPRESSED;

void SET_PASS(void){

	LCD_vSendString("SET PASS : ");
	for(i=0;i<4;i++){
 9a8:	80 91 d2 00 	lds	r24, 0x00D2
 9ac:	8f 5f       	subi	r24, 0xFF	; 255
 9ae:	80 93 d2 00 	sts	0x00D2, r24
 9b2:	84 30       	cpi	r24, 0x04	; 4
 9b4:	b8 f2       	brcs	.-82     	; 0x964 <SET_PASS+0xc>
		_delay_ms(500);
		LCD_vMoveCursor(1,12+i);
		LCD_vSendData('*');
		EEPROM_vWrite(EEPROM_PASS_LOC1+i,val);
	}
	EEPROM_vWrite(EEPROM_STATUS_LOC,0X00);
 9b6:	80 e2       	ldi	r24, 0x20	; 32
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	0e 94 8b 03 	call	0x716	; 0x716 <EEPROM_vWrite>
}
 9c0:	08 95       	ret

000009c2 <main>:

int main(void)
{
 9c2:	8f 92       	push	r8
 9c4:	9f 92       	push	r9
 9c6:	af 92       	push	r10
 9c8:	bf 92       	push	r11
 9ca:	cf 92       	push	r12
 9cc:	df 92       	push	r13
 9ce:	ef 92       	push	r14
 9d0:	ff 92       	push	r15
 9d2:	1f 93       	push	r17
 9d4:	cf 93       	push	r28
 9d6:	df 93       	push	r29
	
	uint8 flag =0 ;
	uint8 tries = MAXTRIES;
	KEYPAD_vInit();
 9d8:	0e 94 98 03 	call	0x730	; 0x730 <KEYPAD_vInit>
	LCD_vInit();
 9dc:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_vInit>
	if(EEPROM_u8Read(EEPROM_STATUS_LOC) == NOTPRESSED){
 9e0:	80 e2       	ldi	r24, 0x20	; 32
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 93 03 	call	0x726	; 0x726 <EEPROM_u8Read>
 9e8:	8f 3f       	cpi	r24, 0xFF	; 255
 9ea:	11 f4       	brne	.+4      	; 0x9f0 <main+0x2e>
		SET_PASS();	
 9ec:	0e 94 ac 04 	call	0x958	; 0x958 <SET_PASS>
	}
	EEPROM_vWrite(EEPROM_STATUS_LOC,0X00);
}

int main(void)
{
 9f0:	12 e3       	ldi	r17, 0x32	; 50
		SET_PASS();	
		
	}		
	while(flag==0){
		LCD_vCLR();
		LCD_vSendString("ENTER PASS:");
 9f2:	0f 2e       	mov	r0, r31
 9f4:	fc e7       	ldi	r31, 0x7C	; 124
 9f6:	ef 2e       	mov	r14, r31
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	ff 2e       	mov	r15, r31
 9fc:	f0 2d       	mov	r31, r0
			LCD_vSendData(pass[i]);
			_delay_ms(500);
			LCD_vMoveCursor(1,12+i);
			LCD_vSendData('*');
		}
		if(EEPROM_u8Read(EEPROM_PASS_LOC1)==pass[0] && EEPROM_u8Read(EEPROM_PASS_LOC2)==pass[1] && EEPROM_u8Read(EEPROM_PASS_LOC3)==pass[2]  &&   EEPROM_u8Read(EEPROM_PASS_LOC4)==pass[3]){
 9fe:	0f 2e       	mov	r0, r31
 a00:	fe ec       	ldi	r31, 0xCE	; 206
 a02:	cf 2e       	mov	r12, r31
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	df 2e       	mov	r13, r31
 a08:	f0 2d       	mov	r31, r0
		else{
			tries--;
			if(tries>0){
				LCD_vCLR();
				LCD_vMoveCursor(1,1);
				LCD_vSendString("PASSWORD WRONG");
 a0a:	0f 2e       	mov	r0, r31
 a0c:	f3 ea       	ldi	r31, 0xA3	; 163
 a0e:	af 2e       	mov	r10, r31
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	bf 2e       	mov	r11, r31
 a14:	f0 2d       	mov	r31, r0
				LCD_vMoveCursor(2,1);
				LCD_vSendString("TRIES LEFT : ");
 a16:	0f 2e       	mov	r0, r31
 a18:	f2 eb       	ldi	r31, 0xB2	; 178
 a1a:	8f 2e       	mov	r8, r31
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	9f 2e       	mov	r9, r31
 a20:	f0 2d       	mov	r31, r0
	if(EEPROM_u8Read(EEPROM_STATUS_LOC) == NOTPRESSED){
		SET_PASS();	
		
	}		
	while(flag==0){
		LCD_vCLR();
 a22:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_vCLR>
		LCD_vSendString("ENTER PASS:");
 a26:	c7 01       	movw	r24, r14
 a28:	0e 94 82 04 	call	0x904	; 0x904 <LCD_vSendString>
		for(i=0;i<4;i++){
 a2c:	10 92 d2 00 	sts	0x00D2, r1
			do{
				pass[i]=KEYPAD_u8Read();
 a30:	c0 91 d2 00 	lds	r28, 0x00D2
 a34:	d0 e0       	ldi	r29, 0x00	; 0
 a36:	0e 94 b7 03 	call	0x76e	; 0x76e <KEYPAD_u8Read>
 a3a:	fe 01       	movw	r30, r28
 a3c:	e2 53       	subi	r30, 0x32	; 50
 a3e:	ff 4f       	sbci	r31, 0xFF	; 255
 a40:	80 83       	st	Z, r24
				
			}while(pass[i] == NOTPRESSED);
 a42:	80 91 d2 00 	lds	r24, 0x00D2
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	82 53       	subi	r24, 0x32	; 50
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	dc 01       	movw	r26, r24
 a4e:	8c 91       	ld	r24, X
 a50:	8f 3f       	cpi	r24, 0xFF	; 255
 a52:	71 f3       	breq	.-36     	; 0xa30 <main+0x6e>
			LCD_vSendData(pass[i]);
 a54:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vSendData>
 a58:	8f e9       	ldi	r24, 0x9F	; 159
 a5a:	96 e8       	ldi	r25, 0x86	; 134
 a5c:	a1 e0       	ldi	r26, 0x01	; 1
 a5e:	81 50       	subi	r24, 0x01	; 1
 a60:	90 40       	sbci	r25, 0x00	; 0
 a62:	a0 40       	sbci	r26, 0x00	; 0
 a64:	e1 f7       	brne	.-8      	; 0xa5e <main+0x9c>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <main+0xa6>
 a68:	00 00       	nop
			_delay_ms(500);
			LCD_vMoveCursor(1,12+i);
 a6a:	60 91 d2 00 	lds	r22, 0x00D2
 a6e:	64 5f       	subi	r22, 0xF4	; 244
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	0e 94 91 04 	call	0x922	; 0x922 <LCD_vMoveCursor>
			LCD_vSendData('*');
 a76:	8a e2       	ldi	r24, 0x2A	; 42
 a78:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vSendData>
		
	}		
	while(flag==0){
		LCD_vCLR();
		LCD_vSendString("ENTER PASS:");
		for(i=0;i<4;i++){
 a7c:	80 91 d2 00 	lds	r24, 0x00D2
 a80:	8f 5f       	subi	r24, 0xFF	; 255
 a82:	80 93 d2 00 	sts	0x00D2, r24
 a86:	84 30       	cpi	r24, 0x04	; 4
 a88:	98 f2       	brcs	.-90     	; 0xa30 <main+0x6e>
			LCD_vSendData(pass[i]);
			_delay_ms(500);
			LCD_vMoveCursor(1,12+i);
			LCD_vSendData('*');
		}
		if(EEPROM_u8Read(EEPROM_PASS_LOC1)==pass[0] && EEPROM_u8Read(EEPROM_PASS_LOC2)==pass[1] && EEPROM_u8Read(EEPROM_PASS_LOC3)==pass[2]  &&   EEPROM_u8Read(EEPROM_PASS_LOC4)==pass[3]){
 a8a:	81 e2       	ldi	r24, 0x21	; 33
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 93 03 	call	0x726	; 0x726 <EEPROM_u8Read>
 a92:	d6 01       	movw	r26, r12
 a94:	9c 91       	ld	r25, X
 a96:	89 17       	cp	r24, r25
 a98:	71 f5       	brne	.+92     	; 0xaf6 <main+0x134>
 a9a:	82 e2       	ldi	r24, 0x22	; 34
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 93 03 	call	0x726	; 0x726 <EEPROM_u8Read>
 aa2:	ef ec       	ldi	r30, 0xCF	; 207
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	90 81       	ld	r25, Z
 aa8:	89 17       	cp	r24, r25
 aaa:	29 f5       	brne	.+74     	; 0xaf6 <main+0x134>
 aac:	83 e2       	ldi	r24, 0x23	; 35
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 93 03 	call	0x726	; 0x726 <EEPROM_u8Read>
 ab4:	a0 ed       	ldi	r26, 0xD0	; 208
 ab6:	b0 e0       	ldi	r27, 0x00	; 0
 ab8:	9c 91       	ld	r25, X
 aba:	89 17       	cp	r24, r25
 abc:	e1 f4       	brne	.+56     	; 0xaf6 <main+0x134>
 abe:	84 e2       	ldi	r24, 0x24	; 36
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 93 03 	call	0x726	; 0x726 <EEPROM_u8Read>
 ac6:	e1 ed       	ldi	r30, 0xD1	; 209
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	90 81       	ld	r25, Z
 acc:	89 17       	cp	r24, r25
 ace:	99 f4       	brne	.+38     	; 0xaf6 <main+0x134>
			LCD_vCLR();
 ad0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_vCLR>
			LCD_vMoveCursor(1,1);
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	61 e0       	ldi	r22, 0x01	; 1
 ad8:	0e 94 91 04 	call	0x922	; 0x922 <LCD_vMoveCursor>
			LCD_vSendString("PASSWORD RIGHT");
 adc:	88 e8       	ldi	r24, 0x88	; 136
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 82 04 	call	0x904	; 0x904 <LCD_vSendString>
			LCD_vMoveCursor(2,1);
 ae4:	82 e0       	ldi	r24, 0x02	; 2
 ae6:	61 e0       	ldi	r22, 0x01	; 1
 ae8:	0e 94 91 04 	call	0x922	; 0x922 <LCD_vMoveCursor>
			LCD_vSendString("SAFE OPENED");
 aec:	87 e9       	ldi	r24, 0x97	; 151
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 82 04 	call	0x904	; 0x904 <LCD_vSendString>
			flag=1;
 af4:	32 c0       	rjmp	.+100    	; 0xb5a <main+0x198>
			
		}
		else{
			tries--;
			if(tries>0){
 af6:	10 33       	cpi	r17, 0x30	; 48
 af8:	f1 f0       	breq	.+60     	; 0xb36 <main+0x174>
				LCD_vCLR();
 afa:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_vCLR>
				LCD_vMoveCursor(1,1);
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	61 e0       	ldi	r22, 0x01	; 1
 b02:	0e 94 91 04 	call	0x922	; 0x922 <LCD_vMoveCursor>
				LCD_vSendString("PASSWORD WRONG");
 b06:	c5 01       	movw	r24, r10
 b08:	0e 94 82 04 	call	0x904	; 0x904 <LCD_vSendString>
				LCD_vMoveCursor(2,1);
 b0c:	82 e0       	ldi	r24, 0x02	; 2
 b0e:	61 e0       	ldi	r22, 0x01	; 1
 b10:	0e 94 91 04 	call	0x922	; 0x922 <LCD_vMoveCursor>
				LCD_vSendString("TRIES LEFT : ");
 b14:	c4 01       	movw	r24, r8
 b16:	0e 94 82 04 	call	0x904	; 0x904 <LCD_vSendString>
				LCD_vSendData(tries+48);
 b1a:	81 2f       	mov	r24, r17
 b1c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vSendData>
 b20:	8f e3       	ldi	r24, 0x3F	; 63
 b22:	9d e0       	ldi	r25, 0x0D	; 13
 b24:	a3 e0       	ldi	r26, 0x03	; 3
 b26:	81 50       	subi	r24, 0x01	; 1
 b28:	90 40       	sbci	r25, 0x00	; 0
 b2a:	a0 40       	sbci	r26, 0x00	; 0
 b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0x164>
 b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0x16e>
 b30:	00 00       	nop
 b32:	11 50       	subi	r17, 0x01	; 1
 b34:	76 cf       	rjmp	.-276    	; 0xa22 <main+0x60>
				_delay_ms(1000);
				
			}
			else{
				LCD_vCLR();
 b36:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_vCLR>
				LCD_vMoveCursor(1,1);
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	61 e0       	ldi	r22, 0x01	; 1
 b3e:	0e 94 91 04 	call	0x922	; 0x922 <LCD_vMoveCursor>
				LCD_vSendString("PASSWORD WRONG");
 b42:	83 ea       	ldi	r24, 0xA3	; 163
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	0e 94 82 04 	call	0x904	; 0x904 <LCD_vSendString>
				LCD_vMoveCursor(2,1);
 b4a:	82 e0       	ldi	r24, 0x02	; 2
 b4c:	61 e0       	ldi	r22, 0x01	; 1
 b4e:	0e 94 91 04 	call	0x922	; 0x922 <LCD_vMoveCursor>
				LCD_vSendString("SAFE CLOSED");
 b52:	80 ec       	ldi	r24, 0xC0	; 192
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 82 04 	call	0x904	; 0x904 <LCD_vSendString>
			}
			
		}
	}		
  
}
 b5a:	80 e0       	ldi	r24, 0x00	; 0
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	df 91       	pop	r29
 b60:	cf 91       	pop	r28
 b62:	1f 91       	pop	r17
 b64:	ff 90       	pop	r15
 b66:	ef 90       	pop	r14
 b68:	df 90       	pop	r13
 b6a:	cf 90       	pop	r12
 b6c:	bf 90       	pop	r11
 b6e:	af 90       	pop	r10
 b70:	9f 90       	pop	r9
 b72:	8f 90       	pop	r8
 b74:	08 95       	ret

00000b76 <_exit>:
 b76:	f8 94       	cli

00000b78 <__stop_program>:
 b78:	ff cf       	rjmp	.-2      	; 0xb78 <__stop_program>
